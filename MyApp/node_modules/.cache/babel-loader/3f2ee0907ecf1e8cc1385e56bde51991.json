{"ast":null,"code":"'use strict';\n\nmodule.exports = typescript;\ntypescript.displayName = 'typescript';\ntypescript.aliases = ['ts'];\n\nfunction typescript(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n      keyword: /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n      builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n    }); // doesn't work with TS because TS is too complex\n\n    delete Prism.languages.typescript['parameter']; // a version of typescript specifically for highlighting types\n\n    var typeInside = Prism.languages.extend('typescript', {});\n    delete typeInside['class-name'];\n    Prism.languages.typescript['class-name'].inside = typeInside;\n    Prism.languages.insertBefore('typescript', 'function', {\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    });\n    Prism.languages.ts = Prism.languages.typescript;\n  })(Prism);\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/typescript.js"],"names":["module","exports","typescript","displayName","aliases","Prism","languages","extend","pattern","lookbehind","greedy","inside","keyword","builtin","typeInside","insertBefore","function","generic","alias","ts"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,UAAjB;AACAA,UAAU,CAACC,WAAX,GAAyB,YAAzB;AACAD,UAAU,CAACE,OAAX,GAAqB,CAAC,IAAD,CAArB;;AACA,SAASF,UAAT,CAAoBG,KAApB,EAA2B;AACzB;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjBA,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,UAAhB,GAA6BG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,YAAvB,EAAqC;AAChE,oBAAc;AACZC,QAAAA,OAAO,EAAE,8KADG;AAEZC,QAAAA,UAAU,EAAE,IAFA;AAGZC,QAAAA,MAAM,EAAE,IAHI;AAIZC,QAAAA,MAAM,EAAE,IAJI,CAIC;;AAJD,OADkD;AAOhE;AACAC,MAAAA,OAAO,EAAE,4ZARuD;AAShEC,MAAAA,OAAO,EAAE;AATuD,KAArC,CAA7B,CADiB,CAWd;;AACH,WAAOR,KAAK,CAACC,SAAN,CAAgBJ,UAAhB,CAA2B,WAA3B,CAAP,CAZiB,CAY8B;;AAC/C,QAAIY,UAAU,GAAGT,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,YAAvB,EAAqC,EAArC,CAAjB;AACA,WAAOO,UAAU,CAAC,YAAD,CAAjB;AACAT,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,UAAhB,CAA2B,YAA3B,EAAyCS,MAAzC,GAAkDG,UAAlD;AACAT,IAAAA,KAAK,CAACC,SAAN,CAAgBS,YAAhB,CAA6B,YAA7B,EAA2C,UAA3C,EAAuD;AACrD,0BAAoB;AAClB;AACAP,QAAAA,OAAO,EAAE,wGAFS;AAGlBE,QAAAA,MAAM,EAAE,IAHU;AAIlBC,QAAAA,MAAM,EAAE;AACNK,UAAAA,QAAQ,EAAE,2DADJ;AAENC,UAAAA,OAAO,EAAE;AACPT,YAAAA,OAAO,EAAE,UADF;AAEP;AACAU,YAAAA,KAAK,EAAE,YAHA;AAIPP,YAAAA,MAAM,EAAEG;AAJD;AAFH;AAJU;AADiC,KAAvD;AAgBAT,IAAAA,KAAK,CAACC,SAAN,CAAgBa,EAAhB,GAAqBd,KAAK,CAACC,SAAN,CAAgBJ,UAArC;AACD,GAjCA,EAiCEG,KAjCF;AAkCF","sourcesContent":["'use strict'\n\nmodule.exports = typescript\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\nfunction typescript(Prism) {\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n      // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n      keyword: /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n      builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n    }) // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter'] // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}