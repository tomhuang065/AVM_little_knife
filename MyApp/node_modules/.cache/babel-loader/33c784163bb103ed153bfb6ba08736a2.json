{"ast":null,"code":"'use strict';\n\nmodule.exports = smali;\nsmali.displayName = 'smali';\nsmali.aliases = [];\n\nfunction smali(Prism) {\n  // Test files for the parser itself:\n  // https://github.com/JesusFreke/smali/tree/master/smali/src/test/resources/LexerTest\n  Prism.languages.smali = {\n    comment: /#.*/,\n    string: {\n      pattern: /\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\(?:.|u[\\da-fA-F]{4}))'/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /L(?:(?:\\w+|`[^`\\r\\n]*`)\\/)*(?:[\\w$]+|`[^`\\r\\n]*`)(?=\\s*;)/,\n      inside: {\n        'class-name': {\n          pattern: /(^L|\\/)(?:[\\w$]+|`[^`\\r\\n]*`)$/,\n          lookbehind: true\n        },\n        namespace: {\n          pattern: /^(L)(?:(?:\\w+|`[^`\\r\\n]*`)\\/)+/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\//\n          }\n        },\n        builtin: /^L/\n      }\n    },\n    builtin: [{\n      // Reference: https://github.com/JesusFreke/smali/wiki/TypesMethodsAndFields#types\n      pattern: /([();\\[])[BCDFIJSVZ]+/,\n      lookbehind: true\n    }, {\n      // e.g. .field mWifiOnUid:I\n      pattern: /([\\w$>]:)[BCDFIJSVZ]/,\n      lookbehind: true\n    }],\n    keyword: [{\n      pattern: /(\\.end\\s+)[\\w-]+/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\w.-])\\.(?!\\d)[\\w-]+/,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\\w.-])/,\n      lookbehind: true\n    }],\n    function: {\n      pattern: /(^|[^\\w.-])(?:\\w+|<[\\w$-]+>)(?=\\()/,\n      lookbehind: true\n    },\n    field: {\n      pattern: /[\\w$]+(?=:)/,\n      alias: 'variable'\n    },\n    register: {\n      pattern: /(^|[^\\w.-])[vp]\\d(?![\\w.-])/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    boolean: {\n      pattern: /(^|[^\\w.-])(?:true|false)(?![\\w.-])/,\n      lookbehind: true\n    },\n    number: {\n      pattern: /(^|[^/\\w.-])-?(?:NAN|INFINITY|0x(?:[\\dA-F]+(?:\\.[\\dA-F]*)?|\\.[\\dA-F]+)(?:p[+-]?[\\dA-F]+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)[dflst]?(?![\\w.-])/i,\n      lookbehind: true\n    },\n    label: {\n      pattern: /(:)\\w+/,\n      lookbehind: true,\n      alias: 'property'\n    },\n    operator: /->|\\.\\.|[\\[=]/,\n    punctuation: /[{}(),;:]/\n  };\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/smali.js"],"names":["module","exports","smali","displayName","aliases","Prism","languages","comment","string","pattern","greedy","inside","lookbehind","namespace","punctuation","builtin","keyword","function","field","alias","register","boolean","number","label","operator"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;;AACA,SAASF,KAAT,CAAeG,KAAf,EAAsB;AACpB;AACA;AACAA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,KAAhB,GAAwB;AACtBK,IAAAA,OAAO,EAAE,KADa;AAEtBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,+DADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KAFc;AAMtB,kBAAc;AACZD,MAAAA,OAAO,EAAE,2DADG;AAEZE,MAAAA,MAAM,EAAE;AACN,sBAAc;AACZF,UAAAA,OAAO,EAAE,gCADG;AAEZG,UAAAA,UAAU,EAAE;AAFA,SADR;AAKNC,QAAAA,SAAS,EAAE;AACTJ,UAAAA,OAAO,EAAE,gCADA;AAETG,UAAAA,UAAU,EAAE,IAFH;AAGTD,UAAAA,MAAM,EAAE;AACNG,YAAAA,WAAW,EAAE;AADP;AAHC,SALL;AAYNC,QAAAA,OAAO,EAAE;AAZH;AAFI,KANQ;AAuBtBA,IAAAA,OAAO,EAAE,CACP;AACE;AACAN,MAAAA,OAAO,EAAE,uBAFX;AAGEG,MAAAA,UAAU,EAAE;AAHd,KADO,EAMP;AACE;AACAH,MAAAA,OAAO,EAAE,sBAFX;AAGEG,MAAAA,UAAU,EAAE;AAHd,KANO,CAvBa;AAmCtBI,IAAAA,OAAO,EAAE,CACP;AACEP,MAAAA,OAAO,EAAE,kBADX;AAEEG,MAAAA,UAAU,EAAE;AAFd,KADO,EAKP;AACEH,MAAAA,OAAO,EAAE,2BADX;AAEEG,MAAAA,UAAU,EAAE;AAFd,KALO,EASP;AACEH,MAAAA,OAAO,EAAE,yJADX;AAEEG,MAAAA,UAAU,EAAE;AAFd,KATO,CAnCa;AAiDtBK,IAAAA,QAAQ,EAAE;AACRR,MAAAA,OAAO,EAAE,oCADD;AAERG,MAAAA,UAAU,EAAE;AAFJ,KAjDY;AAqDtBM,IAAAA,KAAK,EAAE;AACLT,MAAAA,OAAO,EAAE,aADJ;AAELU,MAAAA,KAAK,EAAE;AAFF,KArDe;AAyDtBC,IAAAA,QAAQ,EAAE;AACRX,MAAAA,OAAO,EAAE,6BADD;AAERG,MAAAA,UAAU,EAAE,IAFJ;AAGRO,MAAAA,KAAK,EAAE;AAHC,KAzDY;AA8DtBE,IAAAA,OAAO,EAAE;AACPZ,MAAAA,OAAO,EAAE,qCADF;AAEPG,MAAAA,UAAU,EAAE;AAFL,KA9Da;AAkEtBU,IAAAA,MAAM,EAAE;AACNb,MAAAA,OAAO,EAAE,qJADH;AAENG,MAAAA,UAAU,EAAE;AAFN,KAlEc;AAsEtBW,IAAAA,KAAK,EAAE;AACLd,MAAAA,OAAO,EAAE,QADJ;AAELG,MAAAA,UAAU,EAAE,IAFP;AAGLO,MAAAA,KAAK,EAAE;AAHF,KAtEe;AA2EtBK,IAAAA,QAAQ,EAAE,eA3EY;AA4EtBV,IAAAA,WAAW,EAAE;AA5ES,GAAxB;AA8ED","sourcesContent":["'use strict'\n\nmodule.exports = smali\nsmali.displayName = 'smali'\nsmali.aliases = []\nfunction smali(Prism) {\n  // Test files for the parser itself:\n  // https://github.com/JesusFreke/smali/tree/master/smali/src/test/resources/LexerTest\n  Prism.languages.smali = {\n    comment: /#.*/,\n    string: {\n      pattern: /\"(?:[^\\r\\n\\\\\"]|\\\\.)*\"|'(?:[^\\r\\n\\\\']|\\\\(?:.|u[\\da-fA-F]{4}))'/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /L(?:(?:\\w+|`[^`\\r\\n]*`)\\/)*(?:[\\w$]+|`[^`\\r\\n]*`)(?=\\s*;)/,\n      inside: {\n        'class-name': {\n          pattern: /(^L|\\/)(?:[\\w$]+|`[^`\\r\\n]*`)$/,\n          lookbehind: true\n        },\n        namespace: {\n          pattern: /^(L)(?:(?:\\w+|`[^`\\r\\n]*`)\\/)+/,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\//\n          }\n        },\n        builtin: /^L/\n      }\n    },\n    builtin: [\n      {\n        // Reference: https://github.com/JesusFreke/smali/wiki/TypesMethodsAndFields#types\n        pattern: /([();\\[])[BCDFIJSVZ]+/,\n        lookbehind: true\n      },\n      {\n        // e.g. .field mWifiOnUid:I\n        pattern: /([\\w$>]:)[BCDFIJSVZ]/,\n        lookbehind: true\n      }\n    ],\n    keyword: [\n      {\n        pattern: /(\\.end\\s+)[\\w-]+/,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\w.-])\\.(?!\\d)[\\w-]+/,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\\w.-])/,\n        lookbehind: true\n      }\n    ],\n    function: {\n      pattern: /(^|[^\\w.-])(?:\\w+|<[\\w$-]+>)(?=\\()/,\n      lookbehind: true\n    },\n    field: {\n      pattern: /[\\w$]+(?=:)/,\n      alias: 'variable'\n    },\n    register: {\n      pattern: /(^|[^\\w.-])[vp]\\d(?![\\w.-])/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    boolean: {\n      pattern: /(^|[^\\w.-])(?:true|false)(?![\\w.-])/,\n      lookbehind: true\n    },\n    number: {\n      pattern: /(^|[^/\\w.-])-?(?:NAN|INFINITY|0x(?:[\\dA-F]+(?:\\.[\\dA-F]*)?|\\.[\\dA-F]+)(?:p[+-]?[\\dA-F]+)?|(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?)[dflst]?(?![\\w.-])/i,\n      lookbehind: true\n    },\n    label: {\n      pattern: /(:)\\w+/,\n      lookbehind: true,\n      alias: 'property'\n    },\n    operator: /->|\\.\\.|[\\[=]/,\n    punctuation: /[{}(),;:]/\n  }\n}\n"]},"metadata":{},"sourceType":"script"}