{"ast":null,"code":"'use strict';\n\nmodule.exports = vala;\nvala.displayName = 'vala';\nvala.aliases = [];\n\nfunction vala(Prism) {\n  Prism.languages.vala = Prism.languages.extend('clike', {\n    // Classes copied from prism-csharp\n    'class-name': [{\n      // (Foo bar, Bar baz)\n      pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w+)/,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      // [Foo]\n      pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      // class Foo : Bar\n      pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      // class Foo\n      pattern: /((?:\\b(?:class|interface|new|struct|enum)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }],\n    keyword: /\\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\\b/i,\n    function: /\\w+(?=\\s*\\()/,\n    number: /(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,\n    operator: /\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,\n    punctuation: /[{}[\\];(),.:]/,\n    constant: /\\b[A-Z0-9_]+\\b/\n  });\n  Prism.languages.insertBefore('vala', 'string', {\n    'raw-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    'template-string': {\n      pattern: /@\"[\\s\\S]*?\"/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,\n          inside: {\n            delimiter: {\n              pattern: /^\\$\\(?|\\)$/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.vala\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n  Prism.languages.insertBefore('vala', 'keyword', {\n    regex: {\n      pattern: /\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*(?:$|[\\r\\n,.;})\\]]))/,\n      greedy: true,\n      inside: {\n        'regex-source': {\n          pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-flags': /[a-z]+$/,\n        'regex-delimiter': /^\\/|\\/$/\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/vala.js"],"names":["module","exports","vala","displayName","aliases","Prism","languages","extend","pattern","inside","punctuation","lookbehind","keyword","function","number","operator","constant","insertBefore","greedy","alias","interpolation","delimiter","rest","string","regex"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AACrD;AACA,kBAAc,CACZ;AACE;AACAC,MAAAA,OAAO,EAAE,kDAFX;AAGEC,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAHV,KADY,EAQZ;AACE;AACAF,MAAAA,OAAO,EAAE,0BAFX;AAGEG,MAAAA,UAAU,EAAE,IAHd;AAIEF,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAJV,KARY,EAgBZ;AACE;AACAF,MAAAA,OAAO,EAAE,yEAFX;AAGEG,MAAAA,UAAU,EAAE,IAHd;AAIEF,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAJV,KAhBY,EAwBZ;AACE;AACAF,MAAAA,OAAO,EAAE,mFAFX;AAGEG,MAAAA,UAAU,EAAE,IAHd;AAIEF,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAJV,KAxBY,CAFuC;AAmCrDE,IAAAA,OAAO,EAAE,2kBAnC4C;AAoCrDC,IAAAA,QAAQ,EAAE,cApC2C;AAqCrDC,IAAAA,MAAM,EAAE,0EArC6C;AAsCrDC,IAAAA,QAAQ,EAAE,mEAtC2C;AAuCrDL,IAAAA,WAAW,EAAE,eAvCwC;AAwCrDM,IAAAA,QAAQ,EAAE;AAxC2C,GAAhC,CAAvB;AA0CAX,EAAAA,KAAK,CAACC,SAAN,CAAgBW,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC7C,kBAAc;AACZT,MAAAA,OAAO,EAAE,gBADG;AAEZU,MAAAA,MAAM,EAAE,IAFI;AAGZC,MAAAA,KAAK,EAAE;AAHK,KAD+B;AAM7C,uBAAmB;AACjBX,MAAAA,OAAO,EAAE,aADQ;AAEjBU,MAAAA,MAAM,EAAE,IAFS;AAGjBT,MAAAA,MAAM,EAAE;AACNW,QAAAA,aAAa,EAAE;AACbZ,UAAAA,OAAO,EAAE,6BADI;AAEbC,UAAAA,MAAM,EAAE;AACNY,YAAAA,SAAS,EAAE;AACTb,cAAAA,OAAO,EAAE,YADA;AAETW,cAAAA,KAAK,EAAE;AAFE,aADL;AAKNG,YAAAA,IAAI,EAAEjB,KAAK,CAACC,SAAN,CAAgBJ;AALhB;AAFK,SADT;AAWNqB,QAAAA,MAAM,EAAE;AAXF;AAHS;AAN0B,GAA/C;AAwBAlB,EAAAA,KAAK,CAACC,SAAN,CAAgBW,YAAhB,CAA6B,MAA7B,EAAqC,SAArC,EAAgD;AAC9CO,IAAAA,KAAK,EAAE;AACLhB,MAAAA,OAAO,EAAE,wFADJ;AAELU,MAAAA,MAAM,EAAE,IAFH;AAGLT,MAAAA,MAAM,EAAE;AACN,wBAAgB;AACdD,UAAAA,OAAO,EAAE,2BADK;AAEdG,UAAAA,UAAU,EAAE,IAFE;AAGdQ,UAAAA,KAAK,EAAE,gBAHO;AAIdV,UAAAA,MAAM,EAAEJ,KAAK,CAACC,SAAN,CAAgBkB;AAJV,SADV;AAON,uBAAe,SAPT;AAQN,2BAAmB;AARb;AAHH;AADuC,GAAhD;AAgBD","sourcesContent":["'use strict'\n\nmodule.exports = vala\nvala.displayName = 'vala'\nvala.aliases = []\nfunction vala(Prism) {\n  Prism.languages.vala = Prism.languages.extend('clike', {\n    // Classes copied from prism-csharp\n    'class-name': [\n      {\n        // (Foo bar, Bar baz)\n        pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=(?:\\?\\s+|\\*?\\s+\\*?)\\w+)/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // [Foo]\n        pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // class Foo : Bar\n        pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // class Foo\n        pattern: /((?:\\b(?:class|interface|new|struct|enum)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    ],\n    keyword: /\\b(?:bool|char|double|float|null|size_t|ssize_t|string|unichar|void|int|int8|int16|int32|int64|long|short|uchar|uint|uint8|uint16|uint32|uint64|ulong|ushort|class|delegate|enum|errordomain|interface|namespace|struct|break|continue|do|for|foreach|return|while|else|if|switch|assert|case|default|abstract|const|dynamic|ensures|extern|inline|internal|override|private|protected|public|requires|signal|static|virtual|volatile|weak|async|owned|unowned|try|catch|finally|throw|as|base|construct|delete|get|in|is|lock|new|out|params|ref|sizeof|set|this|throws|typeof|using|value|var|yield)\\b/i,\n    function: /\\w+(?=\\s*\\()/,\n    number: /(?:\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)(?:f|u?l?)?/i,\n    operator: /\\+\\+|--|&&|\\|\\||<<=?|>>=?|=>|->|~|[+\\-*\\/%&^|=!<>]=?|\\?\\??|\\.\\.\\./,\n    punctuation: /[{}[\\];(),.:]/,\n    constant: /\\b[A-Z0-9_]+\\b/\n  })\n  Prism.languages.insertBefore('vala', 'string', {\n    'raw-string': {\n      pattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    'template-string': {\n      pattern: /@\"[\\s\\S]*?\"/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /\\$(?:\\([^)]*\\)|[a-zA-Z]\\w*)/,\n          inside: {\n            delimiter: {\n              pattern: /^\\$\\(?|\\)$/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.vala\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n  Prism.languages.insertBefore('vala', 'keyword', {\n    regex: {\n      pattern: /\\/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[imsx]{0,4}(?=\\s*(?:$|[\\r\\n,.;})\\]]))/,\n      greedy: true,\n      inside: {\n        'regex-source': {\n          pattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-flags': /[a-z]+$/,\n        'regex-delimiter': /^\\/|\\/$/\n      }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}