{"ast":null,"code":"'use strict';\n\nmodule.exports = stan;\nstan.displayName = 'stan';\nstan.aliases = [];\n\nfunction stan(Prism) {\n  // https://mc-stan.org/docs/2_24/reference-manual/bnf-grammars.html\n  Prism.languages.stan = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n    string: {\n      // String literals can contain spaces and any printable ASCII characters except for \" and \\\n      // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n      pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n      greedy: true\n    },\n    directive: {\n      pattern: /^([ \\t]*)#include\\b.*/m,\n      lookbehind: true,\n      alias: 'property'\n    },\n    'function-arg': {\n      pattern: /(\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\s*\\(\\s*)[a-zA-Z]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    constraint: {\n      pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n      lookbehind: true,\n      inside: {\n        expression: {\n          pattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n          lookbehind: true,\n          inside: null // see below\n\n        },\n        property: /\\b[a-z]\\w*(?=\\s*=)/i,\n        operator: /=/,\n        punctuation: /^<|>$|[,]/\n      }\n    },\n    keyword: [/\\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\\b/, // these are functions that are known to take another function as their first argument.\n    /\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\b/],\n    function: /\\b[a-z]\\w*(?=\\s*\\()/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:false|true)\\b/,\n    operator: /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n    punctuation: /[()\\[\\]{},;]/\n  };\n  Prism.languages.stan.constraint.inside.expression.inside = Prism.languages.stan;\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/stan.js"],"names":["module","exports","stan","displayName","aliases","Prism","languages","comment","string","pattern","greedy","directive","lookbehind","alias","constraint","inside","expression","property","operator","punctuation","keyword","function","number","boolean"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnB;AACAA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuB;AACrBK,IAAAA,OAAO,EAAE,wCADY;AAErBC,IAAAA,MAAM,EAAE;AACN;AACA;AACAC,MAAAA,OAAO,EAAE,iCAHH;AAINC,MAAAA,MAAM,EAAE;AAJF,KAFa;AAQrBC,IAAAA,SAAS,EAAE;AACTF,MAAAA,OAAO,EAAE,wBADA;AAETG,MAAAA,UAAU,EAAE,IAFH;AAGTC,MAAAA,KAAK,EAAE;AAHE,KARU;AAarB,oBAAgB;AACdJ,MAAAA,OAAO,EAAE,oHADK;AAEdG,MAAAA,UAAU,EAAE,IAFE;AAGdC,MAAAA,KAAK,EAAE;AAHO,KAbK;AAkBrBC,IAAAA,UAAU,EAAE;AACVL,MAAAA,OAAO,EAAE,sDADC;AAEVG,MAAAA,UAAU,EAAE,IAFF;AAGVG,MAAAA,MAAM,EAAE;AACNC,QAAAA,UAAU,EAAE;AACVP,UAAAA,OAAO,EAAE,qDADC;AAEVG,UAAAA,UAAU,EAAE,IAFF;AAGVG,UAAAA,MAAM,EAAE,IAHE,CAGG;;AAHH,SADN;AAMNE,QAAAA,QAAQ,EAAE,qBANJ;AAONC,QAAAA,QAAQ,EAAE,GAPJ;AAQNC,QAAAA,WAAW,EAAE;AARP;AAHE,KAlBS;AAgCrBC,IAAAA,OAAO,EAAE,CACP,gTADO,EAC2S;AAClT,qGAFO,CAhCY;AAoCrBC,IAAAA,QAAQ,EAAE,sBApCW;AAqCrBC,IAAAA,MAAM,EAAE,8CArCa;AAsCrBC,IAAAA,OAAO,EAAE,oBAtCY;AAuCrBL,IAAAA,QAAQ,EAAE,6CAvCW;AAwCrBC,IAAAA,WAAW,EAAE;AAxCQ,GAAvB;AA0CAd,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqBY,UAArB,CAAgCC,MAAhC,CAAuCC,UAAvC,CAAkDD,MAAlD,GACEV,KAAK,CAACC,SAAN,CAAgBJ,IADlB;AAED","sourcesContent":["'use strict'\n\nmodule.exports = stan\nstan.displayName = 'stan'\nstan.aliases = []\nfunction stan(Prism) {\n  // https://mc-stan.org/docs/2_24/reference-manual/bnf-grammars.html\n  Prism.languages.stan = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/|#(?!include).*/,\n    string: {\n      // String literals can contain spaces and any printable ASCII characters except for \" and \\\n      // https://mc-stan.org/docs/2_24/reference-manual/print-statements-section.html#string-literals\n      pattern: /\"[\\x20\\x21\\x23-\\x5B\\x5D-\\x7E]*\"/,\n      greedy: true\n    },\n    directive: {\n      pattern: /^([ \\t]*)#include\\b.*/m,\n      lookbehind: true,\n      alias: 'property'\n    },\n    'function-arg': {\n      pattern: /(\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\s*\\(\\s*)[a-zA-Z]\\w*/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    constraint: {\n      pattern: /(\\b(?:int|matrix|real|row_vector|vector)\\s*)<[^<>]*>/,\n      lookbehind: true,\n      inside: {\n        expression: {\n          pattern: /(=\\s*)\\S(?:\\S|\\s+(?!\\s))*?(?=\\s*(?:>$|,\\s*\\w+\\s*=))/,\n          lookbehind: true,\n          inside: null // see below\n        },\n        property: /\\b[a-z]\\w*(?=\\s*=)/i,\n        operator: /=/,\n        punctuation: /^<|>$|[,]/\n      }\n    },\n    keyword: [\n      /\\b(?:break|cholesky_factor_corr|cholesky_factor_cov|continue|corr_matrix|cov_matrix|data|else|for|functions|generated|if|in|increment_log_prob|int|matrix|model|ordered|parameters|positive_ordered|print|quantities|real|reject|return|row_vector|simplex|target|transformed|unit_vector|vector|void|while)\\b/, // these are functions that are known to take another function as their first argument.\n      /\\b(?:algebra_solver|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect)\\b/\n    ],\n    function: /\\b[a-z]\\w*(?=\\s*\\()/i,\n    number: /(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:E[+-]?\\d+)?\\b/i,\n    boolean: /\\b(?:false|true)\\b/,\n    operator: /<-|\\.[*/]=?|\\|\\|?|&&|[!=<>+\\-*/]=?|['^%~?:]/,\n    punctuation: /[()\\[\\]{},;]/\n  }\n  Prism.languages.stan.constraint.inside.expression.inside =\n    Prism.languages.stan\n}\n"]},"metadata":{},"sourceType":"script"}