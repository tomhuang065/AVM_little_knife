{"ast":null,"code":"'use strict';\n\nmodule.exports = aql;\naql.displayName = 'aql';\naql.aliases = [];\n\nfunction aql(Prism) {\n  Prism.languages.aql = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    property: {\n      pattern: /([{,]\\s*)(?:(?!\\d)\\w+|([\"'´`])(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2)(?=\\s*:)/,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /([\"'´`])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,\n      greedy: true\n    },\n    variable: /@@?\\w+/,\n    keyword: [{\n      pattern: /(\\bWITH\\s+)COUNT(?=\\s+INTO\\b)/i,\n      lookbehind: true\n    }, /\\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WITH)\\b/i, // pseudo keywords get a lookbehind to avoid false positives\n    {\n      pattern: /(^|[^\\w.[])(?:KEEP|PRUNE|SEARCH|TO)\\b/i,\n      lookbehind: true\n    }, {\n      pattern: /(^|[^\\w.[])(?:CURRENT|NEW|OLD)\\b/,\n      lookbehind: true\n    }, {\n      pattern: /\\bOPTIONS(?=\\s*{)/i\n    }],\n    function: /(?!\\d)\\w+(?=\\s*\\()/,\n    boolean: /(?:true|false)/i,\n    range: {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    },\n    number: /(?:\\B\\.\\d+|\\b(?:0|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?/i,\n    operator: /\\*{2,}|[=!]~|[!=<>]=?|&&|\\|\\||[-+*/%]/,\n    punctuation: /::|[?.:,;()[\\]{}]/\n  };\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/aql.js"],"names":["module","exports","aql","displayName","aliases","Prism","languages","comment","property","pattern","lookbehind","greedy","string","variable","keyword","function","boolean","range","alias","number","operator","punctuation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,GAAjB;AACAA,GAAG,CAACC,WAAJ,GAAkB,KAAlB;AACAD,GAAG,CAACE,OAAJ,GAAc,EAAd;;AACA,SAASF,GAAT,CAAaG,KAAb,EAAoB;AAClBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,GAAhB,GAAsB;AACpBK,IAAAA,OAAO,EAAE,yBADW;AAEpBC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,OAAO,EAAE,mEADD;AAERC,MAAAA,UAAU,EAAE,IAFJ;AAGRC,MAAAA,MAAM,EAAE;AAHA,KAFU;AAOpBC,IAAAA,MAAM,EAAE;AACNH,MAAAA,OAAO,EAAE,oCADH;AAENE,MAAAA,MAAM,EAAE;AAFF,KAPY;AAWpBE,IAAAA,QAAQ,EAAE,QAXU;AAYpBC,IAAAA,OAAO,EAAE,CACP;AACEL,MAAAA,OAAO,EAAE,gCADX;AAEEC,MAAAA,UAAU,EAAE;AAFd,KADO,EAKP,wNALO,EAKmN;AAC1N;AACED,MAAAA,OAAO,EAAE,wCADX;AAEEC,MAAAA,UAAU,EAAE;AAFd,KANO,EAUP;AACED,MAAAA,OAAO,EAAE,kCADX;AAEEC,MAAAA,UAAU,EAAE;AAFd,KAVO,EAcP;AACED,MAAAA,OAAO,EAAE;AADX,KAdO,CAZW;AA8BpBM,IAAAA,QAAQ,EAAE,oBA9BU;AA+BpBC,IAAAA,OAAO,EAAE,iBA/BW;AAgCpBC,IAAAA,KAAK,EAAE;AACLR,MAAAA,OAAO,EAAE,MADJ;AAELS,MAAAA,KAAK,EAAE;AAFF,KAhCa;AAoCpBC,IAAAA,MAAM,EAAE,uDApCY;AAqCpBC,IAAAA,QAAQ,EAAE,uCArCU;AAsCpBC,IAAAA,WAAW,EAAE;AAtCO,GAAtB;AAwCD","sourcesContent":["'use strict'\n\nmodule.exports = aql\naql.displayName = 'aql'\naql.aliases = []\nfunction aql(Prism) {\n  Prism.languages.aql = {\n    comment: /\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//,\n    property: {\n      pattern: /([{,]\\s*)(?:(?!\\d)\\w+|([\"'´`])(?:(?!\\2)[^\\\\\\r\\n]|\\\\.)*\\2)(?=\\s*:)/,\n      lookbehind: true,\n      greedy: true\n    },\n    string: {\n      pattern: /([\"'´`])(?:(?!\\1)[^\\\\\\r\\n]|\\\\.)*\\1/,\n      greedy: true\n    },\n    variable: /@@?\\w+/,\n    keyword: [\n      {\n        pattern: /(\\bWITH\\s+)COUNT(?=\\s+INTO\\b)/i,\n        lookbehind: true\n      },\n      /\\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WITH)\\b/i, // pseudo keywords get a lookbehind to avoid false positives\n      {\n        pattern: /(^|[^\\w.[])(?:KEEP|PRUNE|SEARCH|TO)\\b/i,\n        lookbehind: true\n      },\n      {\n        pattern: /(^|[^\\w.[])(?:CURRENT|NEW|OLD)\\b/,\n        lookbehind: true\n      },\n      {\n        pattern: /\\bOPTIONS(?=\\s*{)/i\n      }\n    ],\n    function: /(?!\\d)\\w+(?=\\s*\\()/,\n    boolean: /(?:true|false)/i,\n    range: {\n      pattern: /\\.\\./,\n      alias: 'operator'\n    },\n    number: /(?:\\B\\.\\d+|\\b(?:0|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?/i,\n    operator: /\\*{2,}|[=!]~|[!=<>]=?|&&|\\|\\||[-+*/%]/,\n    punctuation: /::|[?.:,;()[\\]{}]/\n  }\n}\n"]},"metadata":{},"sourceType":"script"}