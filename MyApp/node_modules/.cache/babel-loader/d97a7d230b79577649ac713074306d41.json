{"ast":null,"code":"'use strict';\n\nmodule.exports = lisp;\nlisp.displayName = 'lisp';\nlisp.aliases = [];\n\nfunction lisp(Prism) {\n  ;\n\n  (function (Prism) {\n    // Functions to construct regular expressions\n    // simple form\n    // e.g. (interactive ... or (interactive)\n    function simple_form(name) {\n      return RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])');\n    } // booleans and numbers\n\n\n    function primitive(pattern) {\n      return RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])');\n    } // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n\n\n    var symbol = '[-+*/_~!@$%^=<>{}\\\\w]+'; // symbol starting with & used in function arguments\n\n    var marker = '&' + symbol; // Open parenthesis for look-behind\n\n    var par = '(\\\\()';\n    var endpar = '(?=\\\\))'; // End the pattern with look-ahead space\n\n    var space = '(?=\\\\s)';\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [{\n        pattern: RegExp(par + '(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' + space),\n        lookbehind: true\n      }, {\n        pattern: RegExp(par + '(?:for|do|collect|return|finally|append|concat|in|by)' + space),\n        lookbehind: true\n      }],\n      declare: {\n        pattern: simple_form('declare'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form('interactive'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive('(?:t|nil)'),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: RegExp(par + '(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' + symbol + '\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'),\n        lookbehind: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(par + 'lambda\\\\s+\\\\(\\\\s*(?:&?' + symbol + '(?:\\\\s+&?' + symbol + ')*\\\\s*)?\\\\)'),\n        lookbehind: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [// open paren, brackets, and close paren\n      /(?:['`,]?\\(|[)\\[\\]])/, // cons\n      {\n        pattern: /(\\s)\\.(?=\\s)/,\n        lookbehind: true\n      }]\n    };\n    var arg = {\n      'lisp-marker': RegExp(marker),\n      rest: {\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        varform: {\n          pattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n          lookbehind: true,\n          inside: {\n            string: language.string,\n            boolean: language.boolean,\n            number: language.number,\n            symbol: language.symbol,\n            punctuation: /[()]/\n          }\n        }\n      }\n    };\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*';\n    var arglist = {\n      pattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: RegExp('&(?:rest|body)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: RegExp('&(?:optional|aux)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n          inside: arg\n        },\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    };\n    language['lambda'].inside.arguments = arglist;\n    language['defun'].inside.arguments = Prism.util.clone(arglist);\n    language['defun'].inside.arguments.inside.sublist = arglist;\n    Prism.languages.lisp = language;\n    Prism.languages.elisp = language;\n    Prism.languages.emacs = language;\n    Prism.languages['emacs-lisp'] = language;\n  })(Prism);\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/lisp.js"],"names":["module","exports","lisp","displayName","aliases","Prism","simple_form","name","RegExp","primitive","pattern","symbol","marker","par","endpar","space","language","heading","alias","comment","string","greedy","inside","argument","splice","keyword","lookbehind","declare","interactive","boolean","number","defvar","variable","defun","arguments","function","punctuation","lambda","car","arg","rest","varform","forms","arglist","keys","util","clone","sublist","languages","elisp","emacs"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = lisp\nlisp.displayName = 'lisp'\nlisp.aliases = []\nfunction lisp(Prism) {\n  ;(function (Prism) {\n    // Functions to construct regular expressions\n    // simple form\n    // e.g. (interactive ... or (interactive)\n    function simple_form(name) {\n      return RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])')\n    } // booleans and numbers\n    function primitive(pattern) {\n      return RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])')\n    } // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n    var symbol = '[-+*/_~!@$%^=<>{}\\\\w]+' // symbol starting with & used in function arguments\n    var marker = '&' + symbol // Open parenthesis for look-behind\n    var par = '(\\\\()'\n    var endpar = '(?=\\\\))' // End the pattern with look-ahead space\n    var space = '(?=\\\\s)'\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [\n        {\n          pattern: RegExp(\n            par +\n              '(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +\n              space\n          ),\n          lookbehind: true\n        },\n        {\n          pattern: RegExp(\n            par +\n              '(?:for|do|collect|return|finally|append|concat|in|by)' +\n              space\n          ),\n          lookbehind: true\n        }\n      ],\n      declare: {\n        pattern: simple_form('declare'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form('interactive'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive('(?:t|nil)'),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: RegExp(\n          par +\n            '(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +\n            symbol +\n            '\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'\n        ),\n        lookbehind: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(\n          par +\n            'lambda\\\\s+\\\\(\\\\s*(?:&?' +\n            symbol +\n            '(?:\\\\s+&?' +\n            symbol +\n            ')*\\\\s*)?\\\\)'\n        ),\n        lookbehind: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [\n        // open paren, brackets, and close paren\n        /(?:['`,]?\\(|[)\\[\\]])/, // cons\n        {\n          pattern: /(\\s)\\.(?=\\s)/,\n          lookbehind: true\n        }\n      ]\n    }\n    var arg = {\n      'lisp-marker': RegExp(marker),\n      rest: {\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        varform: {\n          pattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n          lookbehind: true,\n          inside: {\n            string: language.string,\n            boolean: language.boolean,\n            number: language.number,\n            symbol: language.symbol,\n            punctuation: /[()]/\n          }\n        }\n      }\n    }\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*'\n    var arglist = {\n      pattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: RegExp('&(?:rest|body)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: RegExp('&(?:optional|aux)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n          inside: arg\n        },\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    }\n    language['lambda'].inside.arguments = arglist\n    language['defun'].inside.arguments = Prism.util.clone(arglist)\n    language['defun'].inside.arguments.inside.sublist = arglist\n    Prism.languages.lisp = language\n    Prism.languages.elisp = language\n    Prism.languages.emacs = language\n    Prism.languages['emacs-lisp'] = language\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}