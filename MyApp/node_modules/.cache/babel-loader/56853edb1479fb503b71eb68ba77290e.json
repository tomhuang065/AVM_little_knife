{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = soy;\nsoy.displayName = 'soy';\nsoy.aliases = [];\n\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n    Prism.languages.soy = {\n      comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n        pattern: /(\\s)\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      'command-arg': {\n        pattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [{\n        pattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n        lookbehind: true\n      }, /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],\n      delimiter: {\n        pattern: /^{+\\/?|\\/?}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [/\\w+(?=\\()/, {\n        pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n        lookbehind: true\n      }],\n      boolean: /\\b(?:true|false)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    }; // Tokenize all inline Soy expressions\n\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n      var soyLitteralStart = '{literal}';\n      var soyLitteralEnd = '{/literal}';\n      var soyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n        // Soy tags inside {literal} block are ignored\n        if (match === soyLitteralEnd) {\n          soyLitteralMode = false;\n        }\n\n        if (!soyLitteralMode) {\n          if (match === soyLitteralStart) {\n            soyLitteralMode = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/soy.js"],"names":["refractorMarkupTemplating","require","module","exports","soy","displayName","aliases","Prism","register","stringPattern","numberPattern","languages","comment","pattern","lookbehind","greedy","alias","inside","punctuation","parameter","keyword","delimiter","property","variable","string","number","function","boolean","operator","hooks","add","env","soyPattern","soyLitteralStart","soyLitteralEnd","soyLitteralMode","buildPlaceholders","match","tokenizePlaceholders"],"mappings":"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","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = soy\nsoy.displayName = 'soy'\nsoy.aliases = []\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/\n    Prism.languages.soy = {\n      comment: [\n        /\\/\\*[\\s\\S]*?\\*\\//,\n        {\n          pattern: /(\\s)\\/\\/.*/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      'command-arg': {\n        pattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [\n        {\n          pattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n          lookbehind: true\n        },\n        /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/\n      ],\n      delimiter: {\n        pattern: /^{+\\/?|\\/?}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [\n        /\\w+(?=\\()/,\n        {\n          pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n          lookbehind: true\n        }\n      ],\n      boolean: /\\b(?:true|false)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    } // Tokenize all inline Soy expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g\n      var soyLitteralStart = '{literal}'\n      var soyLitteralEnd = '{/literal}'\n      var soyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'soy',\n        soyPattern,\n        function (match) {\n          // Soy tags inside {literal} block are ignored\n          if (match === soyLitteralEnd) {\n            soyLitteralMode = false\n          }\n          if (!soyLitteralMode) {\n            if (match === soyLitteralStart) {\n              soyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy')\n    })\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}