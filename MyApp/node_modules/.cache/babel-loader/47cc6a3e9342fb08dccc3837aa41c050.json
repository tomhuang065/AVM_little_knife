{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = php;\nphp.displayName = 'php';\nphp.aliases = [];\n\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;\n\n  (function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/;\n    var constant = [{\n      pattern: /\\b(?:false|true)\\b/i,\n      alias: 'boolean'\n    }, /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/, /\\b(?:null)\\b/i];\n    var number = /\\b0b[01]+\\b|\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i;\n    var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;\n    var punctuation = /[{}\\[\\](),:;]/;\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      keyword: [{\n        pattern: /(\\(\\s*)\\b(?:bool|boolean|int|integer|float|string|object|array)\\b(?=\\s*\\))/i,\n        alias: 'type-casting',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)\\b(?:bool|int|float|string|object|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*[a-z0-9_|]\\|\\s*)(?:null|false)\\b(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?[a-z0-9_|]\\|\\s*)(?:null|false)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:null|false)\\b/i,\n        alias: 'type-declaration',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i],\n      'argument-name': /\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n      'class-name': [{\n        pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n        greedy: true\n      }, {\n        pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: 'class-name-fully-qualified',\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-declaration',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-declaration'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n        alias: 'static-context',\n        greedy: true\n      }, {\n        pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n        alias: ['class-name-fully-qualified', 'static-context'],\n        greedy: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n        alias: 'type-hint',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n        alias: ['class-name-fully-qualified', 'type-hint'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n        alias: 'return-type',\n        greedy: true,\n        lookbehind: true\n      }, {\n        pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        alias: ['class-name-fully-qualified', 'return-type'],\n        greedy: true,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }],\n      constant: constant,\n      function: /\\w+\\s*(?=\\()/,\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    };\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    };\n    var string = [{\n      pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n      alias: 'nowdoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<'?|[';]$/\n          }\n        }\n      }\n    }, {\n      pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n      alias: 'heredoc-string',\n      greedy: true,\n      inside: {\n        delimiter: {\n          pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n          alias: 'symbol',\n          inside: {\n            punctuation: /^<<<\"?|[\";]$/\n          }\n        },\n        interpolation: string_interpolation // See below\n\n      }\n    }, {\n      pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n      alias: 'backtick-quoted-string',\n      greedy: true\n    }, {\n      pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n      alias: 'single-quoted-string',\n      greedy: true\n    }, {\n      pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n      alias: 'double-quoted-string',\n      greedy: true,\n      inside: {\n        interpolation: string_interpolation // See below\n\n      }\n    }];\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string\n    });\n    Prism.languages.insertBefore('php', 'variable', {\n      attribute: {\n        pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [{\n                pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                alias: 'class-name',\n                greedy: true,\n                lookbehind: true\n              }, {\n                pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                alias: ['class-name', 'class-name-fully-qualified'],\n                greedy: true,\n                lookbehind: true,\n                inside: {\n                  punctuation: /\\\\/\n                }\n              }],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    });\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return;\n      }\n\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/gi;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/php.js"],"names":["refractorMarkupTemplating","require","module","exports","php","displayName","aliases","Prism","register","comment","constant","pattern","alias","number","operator","punctuation","languages","delimiter","variable","package","lookbehind","inside","keyword","greedy","function","property","string_interpolation","string","interpolation","insertBefore","attribute","hooks","add","env","test","code","phpPattern","buildPlaceholders","tokenizePlaceholders"],"mappings":"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","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   * Rewritten by Tom Pavelec\n   *\n   * Supports PHP 5.3 - 8.0\n   */\n  ;(function (Prism) {\n    var comment = /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*|#(?!\\[).*/\n    var constant = [\n      {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'boolean'\n      },\n      /\\b[A-Z_][A-Z0-9_]*\\b(?!\\s*\\()/,\n      /\\b(?:null)\\b/i\n    ]\n    var number = /\\b0b[01]+\\b|\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    var operator = /<?=>|\\?\\?=?|\\.{3}|\\??->|[!=]=?=?|::|\\*\\*=?|--|\\+\\+|&&|\\|\\||<<|>>|[?~]|[/^|%*&<>.+-]=?/\n    var punctuation = /[{}\\[\\](),:;]/\n    Prism.languages.php = {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      },\n      comment: comment,\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(namespace\\s+|use\\s+(?:function\\s+)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      },\n      keyword: [\n        {\n          pattern: /(\\(\\s*)\\b(?:bool|boolean|int|integer|float|string|object|array)\\b(?=\\s*\\))/i,\n          alias: 'type-casting',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*)\\b(?:bool|int|float|string|object|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*[a-z0-9_|]\\|\\s*)(?:null|false)\\b(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|self|static|callable|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?[a-z0-9_|]\\|\\s*)(?:null|false)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b(?:bool|int|float|string|object|void|array(?!\\s*\\()|mixed|iterable|(?:null|false)(?=\\s*\\|))\\b/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:null|false)\\b/i,\n          alias: 'type-declaration',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b(?:parent|self|static)(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i\n      ],\n      'argument-name': /\\b[a-z_]\\w*(?=\\s*:(?!:))/i,\n      'class-name': [\n        {\n          pattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new(?!\\s+self|\\s+static))\\s+|\\bcatch\\s*\\()\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\|\\s*)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?!\\\\)\\b(?=\\s*\\|)/i,\n          greedy: true\n        },\n        {\n          pattern: /(\\|\\s*)(?:\\\\?\\b[a-z_]\\w*)+\\b/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+\\b(?=\\s*\\|)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(\\b(?:extends|implements|instanceof|new(?!\\s+self\\b|\\s+static\\b))\\s+|\\bcatch\\s*\\()(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: 'class-name-fully-qualified',\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-declaration',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-declaration'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /\\b[a-z_]\\w*(?=\\s*::)/i,\n          alias: 'static-context',\n          greedy: true\n        },\n        {\n          pattern: /(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*::)/i,\n          alias: ['class-name-fully-qualified', 'static-context'],\n          greedy: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /([(,?]\\s*)[a-z_]\\w*(?=\\s*\\$)/i,\n          alias: 'type-hint',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /([(,?]\\s*)(?:\\\\?\\b[a-z_]\\w*)+(?=\\s*\\$)/i,\n          alias: ['class-name-fully-qualified', 'type-hint'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n          alias: 'return-type',\n          greedy: true,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\)\\s*:\\s*(?:\\?\\s*)?)(?:\\\\?\\b[a-z_]\\w*)+\\b(?!\\\\)/i,\n          alias: ['class-name-fully-qualified', 'return-type'],\n          greedy: true,\n          lookbehind: true,\n          inside: {\n            punctuation: /\\\\/\n          }\n        }\n      ],\n      constant: constant,\n      function: /\\w+\\s*(?=\\()/,\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      },\n      number: number,\n      operator: operator,\n      punctuation: punctuation\n    }\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[[^\\r\\n\\[\\]]+\\]|->\\w+)*)/,\n      lookbehind: true,\n      inside: Prism.languages.php\n    }\n    var string = [\n      {\n        pattern: /<<<'([^']+)'[\\r\\n](?:.*[\\r\\n])*?\\1;/,\n        alias: 'nowdoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      {\n        pattern: /<<<(?:\"([^\"]+)\"[\\r\\n](?:.*[\\r\\n])*?\\1;|([a-z_]\\w*)[\\r\\n](?:.*[\\r\\n])*?\\2;)/i,\n        alias: 'heredoc-string',\n        greedy: true,\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n        }\n      },\n      {\n        pattern: /`(?:\\\\[\\s\\S]|[^\\\\`])*`/,\n        alias: 'backtick-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        alias: 'single-quoted-string',\n        greedy: true\n      },\n      {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        alias: 'double-quoted-string',\n        greedy: true,\n        inside: {\n          interpolation: string_interpolation // See below\n        }\n      }\n    ]\n    Prism.languages.insertBefore('php', 'variable', {\n      string: string\n    })\n    Prism.languages.insertBefore('php', 'variable', {\n      attribute: {\n        pattern: /#\\[(?:[^\"'\\/#]|\\/(?![*/])|\\/\\/.*$|#(?!\\[).*$|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*')+\\](?=\\s*[a-z$#])/im,\n        greedy: true,\n        inside: {\n          'attribute-content': {\n            pattern: /^(#\\[)[\\s\\S]+(?=]$)/,\n            lookbehind: true,\n            // inside can appear subset of php\n            inside: {\n              comment: comment,\n              string: string,\n              'attribute-class-name': [\n                {\n                  pattern: /([^:]|^)\\b[a-z_]\\w*(?!\\\\)\\b/i,\n                  alias: 'class-name',\n                  greedy: true,\n                  lookbehind: true\n                },\n                {\n                  pattern: /([^:]|^)(?:\\\\?\\b[a-z_]\\w*)+/i,\n                  alias: ['class-name', 'class-name-fully-qualified'],\n                  greedy: true,\n                  lookbehind: true,\n                  inside: {\n                    punctuation: /\\\\/\n                  }\n                }\n              ],\n              constant: constant,\n              number: number,\n              operator: operator,\n              punctuation: punctuation\n            }\n          },\n          delimiter: {\n            pattern: /^#\\[|]$/,\n            alias: 'punctuation'\n          }\n        }\n      }\n    })\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#(?!\\[))(?:[^?\\n\\r]|\\?(?!>))*(?=$|\\?>|[\\r\\n])|#\\[|\\/\\*(?:[^*]|\\*(?!\\/))*(?:\\*\\/|$))*?(?:\\?>|$)/gi\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}