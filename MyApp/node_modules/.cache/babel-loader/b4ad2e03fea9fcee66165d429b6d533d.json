{"ast":null,"code":"'use strict';\n\nvar refractorBash = require('./bash.js');\n\nmodule.exports = shellSession;\nshellSession.displayName = 'shellSession';\nshellSession.aliases = [];\n\nfunction shellSession(Prism) {\n  Prism.register(refractorBash);\n\n  (function (Prism) {\n    // CAREFUL!\n    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!\n    var strings = [// normal string\n    // 1 capturing group\n    /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|(?!\\1)[^\\\\`$])*\\1/.source, // here doc\n    // 2 capturing groups\n    /<<-?\\s*([\"']?)(\\w+)\\2\\s[\\s\\S]*?[\\r\\n]\\3/.source].join('|');\n    Prism.languages['shell-session'] = {\n      command: {\n        pattern: RegExp(/^(?:[^\\s@:$#*!/\\\\]+@[^\\s@:$#*!/\\\\]+(?::[^\\0-\\x1F$#*?\"<>:;|]+)?)?[$#](?:[^\\\\\\r\\n'\"<]|\\\\.|<<str>>)+/.source.replace(/<<str>>/g, function () {\n          return strings;\n        }), 'm'),\n        greedy: true,\n        inside: {\n          info: {\n            // foo@bar:~/files$ exit\n            // foo@bar$ exit\n            pattern: /^[^#$]+/,\n            alias: 'punctuation',\n            inside: {\n              path: {\n                pattern: /(:)[\\s\\S]+/,\n                lookbehind: true\n              },\n              user: /^[^:]+/,\n              punctuation: /:/\n            }\n          },\n          bash: {\n            pattern: /(^[$#]\\s*)\\S[\\s\\S]*/,\n            lookbehind: true,\n            alias: 'language-bash',\n            inside: Prism.languages.bash\n          },\n          'shell-symbol': {\n            pattern: /^[$#]/,\n            alias: 'important'\n          }\n        }\n      },\n      output: /.(?:.*(?:[\\r\\n]|.$))*/\n    };\n    Prism.languages['sh-session'] = Prism.languages['shellsession'] = Prism.languages['shell-session'];\n  })(Prism);\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/shell-session.js"],"names":["refractorBash","require","module","exports","shellSession","displayName","aliases","Prism","register","strings","source","join","languages","command","pattern","RegExp","replace","greedy","inside","info","alias","path","lookbehind","user","punctuation","bash","output"],"mappings":"AAAA;;AACA,IAAIA,aAAa,GAAGC,OAAO,CAAC,WAAD,CAA3B;;AACAC,MAAM,CAACC,OAAP,GAAiBC,YAAjB;AACAA,YAAY,CAACC,WAAb,GAA2B,cAA3B;AACAD,YAAY,CAACE,OAAb,GAAuB,EAAvB;;AACA,SAASF,YAAT,CAAsBG,KAAtB,EAA6B;AAC3BA,EAAAA,KAAK,CAACC,QAAN,CAAeR,aAAf;;AACC,GAAC,UAAUO,KAAV,EAAiB;AACjB;AACA;AACA,QAAIE,OAAO,GAAG,CACZ;AACA;AACA,uEAAmEC,MAHvD,EAG+D;AAC3E;AACA,8CAA0CA,MAL9B,EAMZC,IANY,CAMP,GANO,CAAd;AAOAJ,IAAAA,KAAK,CAACK,SAAN,CAAgB,eAAhB,IAAmC;AACjCC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAEC,MAAM,CACb,oGAAoGL,MAApG,CAA2GM,OAA3G,CACE,UADF,EAEE,YAAY;AACV,iBAAOP,OAAP;AACD,SAJH,CADa,EAOb,GAPa,CADR;AAUPQ,QAAAA,MAAM,EAAE,IAVD;AAWPC,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAE;AACJ;AACA;AACAL,YAAAA,OAAO,EAAE,SAHL;AAIJM,YAAAA,KAAK,EAAE,aAJH;AAKJF,YAAAA,MAAM,EAAE;AACNG,cAAAA,IAAI,EAAE;AACJP,gBAAAA,OAAO,EAAE,YADL;AAEJQ,gBAAAA,UAAU,EAAE;AAFR,eADA;AAKNC,cAAAA,IAAI,EAAE,QALA;AAMNC,cAAAA,WAAW,EAAE;AANP;AALJ,WADA;AAeNC,UAAAA,IAAI,EAAE;AACJX,YAAAA,OAAO,EAAE,qBADL;AAEJQ,YAAAA,UAAU,EAAE,IAFR;AAGJF,YAAAA,KAAK,EAAE,eAHH;AAIJF,YAAAA,MAAM,EAAEX,KAAK,CAACK,SAAN,CAAgBa;AAJpB,WAfA;AAqBN,0BAAgB;AACdX,YAAAA,OAAO,EAAE,OADK;AAEdM,YAAAA,KAAK,EAAE;AAFO;AArBV;AAXD,OADwB;AAuCjCM,MAAAA,MAAM,EAAE;AAvCyB,KAAnC;AAyCAnB,IAAAA,KAAK,CAACK,SAAN,CAAgB,YAAhB,IAAgCL,KAAK,CAACK,SAAN,CAAgB,cAAhB,IAC9BL,KAAK,CAACK,SAAN,CAAgB,eAAhB,CADF;AAED,GArDA,EAqDEL,KArDF;AAsDF","sourcesContent":["'use strict'\nvar refractorBash = require('./bash.js')\nmodule.exports = shellSession\nshellSession.displayName = 'shellSession'\nshellSession.aliases = []\nfunction shellSession(Prism) {\n  Prism.register(refractorBash)\n  ;(function (Prism) {\n    // CAREFUL!\n    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!\n    var strings = [\n      // normal string\n      // 1 capturing group\n      /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|\\$(?!\\()|`[^`]+`|(?!\\1)[^\\\\`$])*\\1/.source, // here doc\n      // 2 capturing groups\n      /<<-?\\s*([\"']?)(\\w+)\\2\\s[\\s\\S]*?[\\r\\n]\\3/.source\n    ].join('|')\n    Prism.languages['shell-session'] = {\n      command: {\n        pattern: RegExp(\n          /^(?:[^\\s@:$#*!/\\\\]+@[^\\s@:$#*!/\\\\]+(?::[^\\0-\\x1F$#*?\"<>:;|]+)?)?[$#](?:[^\\\\\\r\\n'\"<]|\\\\.|<<str>>)+/.source.replace(\n            /<<str>>/g,\n            function () {\n              return strings\n            }\n          ),\n          'm'\n        ),\n        greedy: true,\n        inside: {\n          info: {\n            // foo@bar:~/files$ exit\n            // foo@bar$ exit\n            pattern: /^[^#$]+/,\n            alias: 'punctuation',\n            inside: {\n              path: {\n                pattern: /(:)[\\s\\S]+/,\n                lookbehind: true\n              },\n              user: /^[^:]+/,\n              punctuation: /:/\n            }\n          },\n          bash: {\n            pattern: /(^[$#]\\s*)\\S[\\s\\S]*/,\n            lookbehind: true,\n            alias: 'language-bash',\n            inside: Prism.languages.bash\n          },\n          'shell-symbol': {\n            pattern: /^[$#]/,\n            alias: 'important'\n          }\n        }\n      },\n      output: /.(?:.*(?:[\\r\\n]|.$))*/\n    }\n    Prism.languages['sh-session'] = Prism.languages['shellsession'] =\n      Prism.languages['shell-session']\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}