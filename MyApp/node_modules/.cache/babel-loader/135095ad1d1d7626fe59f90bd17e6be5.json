{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"BackdropProps\"],\n      _excluded2 = [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\"];\nimport * as React from 'react';\nimport { flushSync } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { useThemeProps } from '@mui/system';\nimport { NoSsr } from '@mui/base';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport useForkRef from '../utils/useForkRef';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport SwipeArea from './SwipeArea'; // This value is closed to what browsers are using internally to\n// trigger a native scroll.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst UNCERTAINTY_THRESHOLD = 3; // px\n// This is the part of the drawer displayed on touch start.\n\nconst DRAG_STARTED_SIGNAL = 20; // px\n// We can only have one instance at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\n\nlet claimedSwipeInstance = null; // Exported for test purposes.\n\nexport function reset() {\n  claimedSwipeInstance = null;\n}\n\nfunction calculateCurrentX(anchor, touches, doc) {\n  return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\n\nfunction calculateCurrentY(anchor, touches, containerWindow) {\n  return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;\n}\n\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\n\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n/**\n * @param {Element | null} element\n * @param {Element} rootNode\n */\n\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  const domTreeShapes = [];\n\n  while (element && element !== rootNode.parentElement) {\n    const style = ownerWindow(rootNode).getComputedStyle(element);\n\n    if ( // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {// noop\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n\n    element = element.parentElement;\n  }\n\n  return domTreeShapes;\n}\n/**\n * @param {object} param0\n * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes\n */\n\n\nfunction computeHasNativeHandler({\n  domTreeShapes,\n  start,\n  current,\n  anchor\n}) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(shape => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nconst iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiSwipeableDrawer',\n    props: inProps\n  });\n  const theme = useTheme();\n  const transitionDurationDefault = {\n    enter: theme.transitions.duration.enteringScreen,\n    exit: theme.transitions.duration.leavingScreen\n  };\n\n  const {\n    anchor = 'left',\n    disableBackdropTransition = false,\n    disableDiscovery = false,\n    disableSwipeToOpen = iOS,\n    hideBackdrop,\n    hysteresis = 0.52,\n    minFlingVelocity = 450,\n    ModalProps: {\n      BackdropProps\n    } = {},\n    onClose,\n    onOpen,\n    open = false,\n    PaperProps = {},\n    SwipeAreaProps,\n    swipeAreaWidth = 20,\n    transitionDuration = transitionDurationDefault,\n    variant = 'temporary'\n  } = props,\n        ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, _excluded),\n        other = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n  const handleRef = useForkRef(PaperProps.ref, paperRef);\n  const touchDetected = React.useRef(false); // Ref for transition duration based on / to match swipe speed\n\n  const calculatedDurationRef = React.useRef(); // Use a ref so the open value used is always up to date inside useCallback.\n\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  const setPosition = React.useCallback((translate, options = {}) => {\n    const {\n      mode = null,\n      changeTransition = true\n    } = options;\n    const anchorRtl = getAnchor(theme, anchor);\n    const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n    const horizontalSwipe = isHorizontal(anchor);\n    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n    const drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    let transition = '';\n\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        easing: undefined,\n        style: undefined,\n        timeout: transitionDuration\n      }, {\n        mode\n      }));\n    }\n\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n\n    if (!disableBackdropTransition && !hideBackdrop) {\n      const backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  const handleBodyTouchEnd = useEventCallback(nativeEvent => {\n    if (!touchDetected.current) {\n      return;\n    }\n\n    claimedSwipeInstance = null;\n    touchDetected.current = false;\n    flushSync(() => {\n      setMaybeSwiping(false);\n    }); // The swipe wasn't started.\n\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n\n    swipeInstance.current.isSwiping = null;\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));\n    } else {\n      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));\n    }\n\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n\n      return;\n    }\n\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  const handleBodyTouchMove = useEventCallback(nativeEvent => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n\n\n    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n\n    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {\n      const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);\n      const hasNativeHandler = computeHasNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor\n      });\n\n      if (hasNativeHandler) {\n        claimedSwipeInstance = true;\n        return;\n      }\n\n      claimedSwipeInstance = swipeInstance.current;\n    } // We don't know yet.\n\n\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY);\n      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n\n      if (definitelySwiping && nativeEvent.cancelable) {\n        nativeEvent.preventDefault();\n      }\n\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(nativeEvent);\n          return;\n        } // Shift the starting point.\n\n\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.\n\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;\n          } else {\n            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;\n          }\n        }\n      }\n    }\n\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n\n    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n\n    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.\n\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.\n\n    if (nativeEvent.cancelable) {\n      nativeEvent.preventDefault();\n    }\n\n    setPosition(translate);\n  });\n  const handleBodyTouchStart = useEventCallback(nativeEvent => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (nativeEvent.defaultPrevented) {\n      return;\n    } // We can only have one node at the time claiming ownership for handling the swipe.\n\n\n    if (nativeEvent.defaultMuiPrevented) {\n      return;\n    } // At least one element clogs the drawer interaction zone.\n\n\n    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n\n    if (!open) {\n      if (disableSwipeToOpen || nativeEvent.target !== swipeAreaRef.current) {\n        return;\n      }\n\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n\n    nativeEvent.defaultMuiPrevented = true;\n    claimedSwipeInstance = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    flushSync(() => {\n      setMaybeSwiping(true);\n    });\n\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {\n        changeTransition: false\n      });\n    }\n\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n    touchDetected.current = true;\n  });\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      const doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart); // A blocking listener prevents Firefox's navbar to auto-hide on scroll.\n      // It only needs to prevent scrolling on the drawer's content when open.\n      // When closed, the overlay prevents scrolling.\n\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: !open\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return () => {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: !open\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n\n    return undefined;\n  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(() => () => {\n    // We need to release the lock.\n    if (claimedSwipeInstance === swipeInstance.current) {\n      claimedSwipeInstance = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Drawer, _extends({\n      open: variant === 'temporary' && maybeSwiping ? true : open,\n      variant: variant,\n      ModalProps: _extends({\n        BackdropProps: _extends({}, BackdropProps, {\n          ref: backdropRef\n        })\n      }, variant === 'temporary' && {\n        keepMounted: true\n      }, ModalPropsProp),\n      hideBackdrop: hideBackdrop,\n      PaperProps: _extends({}, PaperProps, {\n        style: _extends({\n          pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n        }, PaperProps.style),\n        ref: handleRef\n      }),\n      anchor: anchor,\n      transitionDuration: calculatedDurationRef.current || transitionDuration,\n      onClose: onClose,\n      ref: ref\n    }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/_jsx(NoSsr, {\n      children: /*#__PURE__*/_jsx(SwipeArea, _extends({\n        anchor: anchor,\n        ref: swipeAreaRef,\n        width: swipeAreaWidth\n      }, SwipeAreaProps))\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition: PropTypes.bool,\n\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery: PropTypes.bool,\n\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Affects how far the drawer must be opened/closed to change its state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis: PropTypes.number,\n\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, the component is shown.\n   * @default false\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth: PropTypes.number,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/@mui/material/SwipeableDrawer/SwipeableDrawer.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","flushSync","PropTypes","elementTypeAcceptingRef","useThemeProps","NoSsr","Drawer","getAnchor","isHorizontal","useForkRef","ownerDocument","ownerWindow","useEventCallback","useEnhancedEffect","useTheme","getTransitionProps","SwipeArea","jsx","_jsx","jsxs","_jsxs","UNCERTAINTY_THRESHOLD","DRAG_STARTED_SIGNAL","claimedSwipeInstance","reset","calculateCurrentX","anchor","touches","doc","body","offsetWidth","pageX","calculateCurrentY","containerWindow","innerHeight","clientY","getMaxTranslate","horizontalSwipe","paperInstance","clientWidth","clientHeight","getTranslate","currentTranslate","startLocation","open","maxTranslate","Math","min","max","getDomTreeShapes","element","rootNode","domTreeShapes","parentElement","style","getComputedStyle","getPropertyValue","scrollWidth","scrollHeight","push","computeHasNativeHandler","start","current","axisProperties","scrollPosition","x","y","scrollLength","clientLength","some","shape","goingForward","axis","round","areNotAtStart","areNotAtEnd","iOS","navigator","test","userAgent","SwipeableDrawer","forwardRef","inProps","ref","props","name","theme","transitionDurationDefault","enter","transitions","duration","enteringScreen","exit","leavingScreen","disableBackdropTransition","disableDiscovery","disableSwipeToOpen","hideBackdrop","hysteresis","minFlingVelocity","ModalProps","BackdropProps","onClose","onOpen","PaperProps","SwipeAreaProps","swipeAreaWidth","transitionDuration","variant","ModalPropsProp","other","maybeSwiping","setMaybeSwiping","useState","swipeInstance","useRef","isSwiping","swipeAreaRef","backdropRef","paperRef","handleRef","touchDetected","calculatedDurationRef","setPosition","useCallback","translate","options","mode","changeTransition","anchorRtl","rtlTranslateMultiplier","indexOf","transform","drawerStyle","webkitTransform","transition","create","easing","undefined","timeout","webkitTransition","backdropStyle","opacity","handleBodyTouchEnd","nativeEvent","horizontal","changedTouches","currentTarget","startX","startY","translateRatio","abs","velocity","handleBodyTouchMove","currentX","currentY","contains","target","hasNativeHandler","dx","dy","definitelySwiping","cancelable","preventDefault","paperHit","lastTranslate","lastTime","performance","now","handleBodyTouchStart","defaultPrevented","defaultMuiPrevented","useEffect","addEventListener","passive","removeEventListener","Fragment","children","keepMounted","pointerEvents","width","process","env","NODE_ENV","propTypes","oneOf","node","bool","number","component","func","isRequired","object","oneOfType","appear"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"BackdropProps\"],\n  _excluded2 = [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\"];\nimport * as React from 'react';\nimport { flushSync } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { useThemeProps } from '@mui/system';\nimport { NoSsr } from '@mui/base';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport useForkRef from '../utils/useForkRef';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport SwipeArea from './SwipeArea';\n\n// This value is closed to what browsers are using internally to\n// trigger a native scroll.\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst UNCERTAINTY_THRESHOLD = 3; // px\n\n// This is the part of the drawer displayed on touch start.\nconst DRAG_STARTED_SIGNAL = 20; // px\n\n// We can only have one instance at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\nlet claimedSwipeInstance = null;\n\n// Exported for test purposes.\nexport function reset() {\n  claimedSwipeInstance = null;\n}\nfunction calculateCurrentX(anchor, touches, doc) {\n  return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\nfunction calculateCurrentY(anchor, touches, containerWindow) {\n  return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;\n}\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n\n/**\n * @param {Element | null} element\n * @param {Element} rootNode\n */\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  const domTreeShapes = [];\n  while (element && element !== rootNode.parentElement) {\n    const style = ownerWindow(rootNode).getComputedStyle(element);\n    if (\n    // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' ||\n    // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {\n      // noop\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n    element = element.parentElement;\n  }\n  return domTreeShapes;\n}\n\n/**\n * @param {object} param0\n * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes\n */\nfunction computeHasNativeHandler({\n  domTreeShapes,\n  start,\n  current,\n  anchor\n}) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(shape => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return true;\n    }\n    return false;\n  });\n}\nconst iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiSwipeableDrawer',\n    props: inProps\n  });\n  const theme = useTheme();\n  const transitionDurationDefault = {\n    enter: theme.transitions.duration.enteringScreen,\n    exit: theme.transitions.duration.leavingScreen\n  };\n  const {\n      anchor = 'left',\n      disableBackdropTransition = false,\n      disableDiscovery = false,\n      disableSwipeToOpen = iOS,\n      hideBackdrop,\n      hysteresis = 0.52,\n      minFlingVelocity = 450,\n      ModalProps: {\n        BackdropProps\n      } = {},\n      onClose,\n      onOpen,\n      open = false,\n      PaperProps = {},\n      SwipeAreaProps,\n      swipeAreaWidth = 20,\n      transitionDuration = transitionDurationDefault,\n      variant = 'temporary'\n    } = props,\n    ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, _excluded),\n    other = _objectWithoutPropertiesLoose(props, _excluded2);\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n  const handleRef = useForkRef(PaperProps.ref, paperRef);\n  const touchDetected = React.useRef(false);\n\n  // Ref for transition duration based on / to match swipe speed\n  const calculatedDurationRef = React.useRef();\n\n  // Use a ref so the open value used is always up to date inside useCallback.\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  const setPosition = React.useCallback((translate, options = {}) => {\n    const {\n      mode = null,\n      changeTransition = true\n    } = options;\n    const anchorRtl = getAnchor(theme, anchor);\n    const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n    const horizontalSwipe = isHorizontal(anchor);\n    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n    const drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    let transition = '';\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        easing: undefined,\n        style: undefined,\n        timeout: transitionDuration\n      }, {\n        mode\n      }));\n    }\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n    if (!disableBackdropTransition && !hideBackdrop) {\n      const backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  const handleBodyTouchEnd = useEventCallback(nativeEvent => {\n    if (!touchDetected.current) {\n      return;\n    }\n    claimedSwipeInstance = null;\n    touchDetected.current = false;\n    flushSync(() => {\n      setMaybeSwiping(false);\n    });\n\n    // The swipe wasn't started.\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n    swipeInstance.current.isSwiping = null;\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));\n    } else {\n      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));\n    }\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n      return;\n    }\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  const handleBodyTouchMove = useEventCallback(nativeEvent => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    }\n\n    // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {\n      return;\n    }\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {\n      const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);\n      const hasNativeHandler = computeHasNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor\n      });\n      if (hasNativeHandler) {\n        claimedSwipeInstance = true;\n        return;\n      }\n      claimedSwipeInstance = swipeInstance.current;\n    }\n\n    // We don't know yet.\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY);\n      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n      if (definitelySwiping && nativeEvent.cancelable) {\n        nativeEvent.preventDefault();\n      }\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(nativeEvent);\n          return;\n        }\n\n        // Shift the starting point.\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n\n        // Compensate for the part of the drawer displayed on touch start.\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;\n          } else {\n            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;\n          }\n        }\n      }\n    }\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3;\n\n    // Low Pass filter.\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now();\n\n    // We are swiping, let's prevent the scroll event on iOS.\n    if (nativeEvent.cancelable) {\n      nativeEvent.preventDefault();\n    }\n    setPosition(translate);\n  });\n  const handleBodyTouchStart = useEventCallback(nativeEvent => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (nativeEvent.defaultPrevented) {\n      return;\n    }\n\n    // We can only have one node at the time claiming ownership for handling the swipe.\n    if (nativeEvent.defaultMuiPrevented) {\n      return;\n    }\n\n    // At least one element clogs the drawer interaction zone.\n    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {\n      return;\n    }\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n    if (!open) {\n      if (disableSwipeToOpen || nativeEvent.target !== swipeAreaRef.current) {\n        return;\n      }\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n    nativeEvent.defaultMuiPrevented = true;\n    claimedSwipeInstance = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    flushSync(() => {\n      setMaybeSwiping(true);\n    });\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {\n        changeTransition: false\n      });\n    }\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n    touchDetected.current = true;\n  });\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      const doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart);\n      // A blocking listener prevents Firefox's navbar to auto-hide on scroll.\n      // It only needs to prevent scrolling on the drawer's content when open.\n      // When closed, the overlay prevents scrolling.\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: !open\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return () => {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: !open\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n    return undefined;\n  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(() => () => {\n    // We need to release the lock.\n    if (claimedSwipeInstance === swipeInstance.current) {\n      claimedSwipeInstance = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Drawer, _extends({\n      open: variant === 'temporary' && maybeSwiping ? true : open,\n      variant: variant,\n      ModalProps: _extends({\n        BackdropProps: _extends({}, BackdropProps, {\n          ref: backdropRef\n        })\n      }, variant === 'temporary' && {\n        keepMounted: true\n      }, ModalPropsProp),\n      hideBackdrop: hideBackdrop,\n      PaperProps: _extends({}, PaperProps, {\n        style: _extends({\n          pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n        }, PaperProps.style),\n        ref: handleRef\n      }),\n      anchor: anchor,\n      transitionDuration: calculatedDurationRef.current || transitionDuration,\n      onClose: onClose,\n      ref: ref\n    }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/_jsx(NoSsr, {\n      children: /*#__PURE__*/_jsx(SwipeArea, _extends({\n        anchor: anchor,\n        ref: swipeAreaRef,\n        width: swipeAreaWidth\n      }, SwipeAreaProps))\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition: PropTypes.bool,\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery: PropTypes.bool,\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n  /**\n   * Affects how far the drawer must be opened/closed to change its state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis: PropTypes.number,\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity: PropTypes.number,\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n  /**\n   * If `true`, the component is shown.\n   * @default false\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes /* @typescript-to-proptypes-ignore */.shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth: PropTypes.number,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;"]},"metadata":{},"sourceType":"module"}