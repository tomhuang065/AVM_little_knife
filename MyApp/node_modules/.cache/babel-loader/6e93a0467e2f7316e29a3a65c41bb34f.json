{"ast":null,"code":"'use strict';\n\nmodule.exports = sass;\nsass.displayName = 'sass';\nsass.aliases = [];\n\nfunction sass(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/m\n        }\n      }\n    });\n    delete Prism.languages.sass.atrule;\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n    var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n      pattern: /(\\s+)-(?=\\s)/,\n      lookbehind: true\n    }];\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n        inside: {\n          property: [/[^:\\s]+(?=\\s*:)/, {\n            pattern: /(:)[^:\\s]+/,\n            lookbehind: true\n          }],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    });\n    delete Prism.languages.sass.property;\n    delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\n        lookbehind: true\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/sass.js"],"names":["module","exports","sass","displayName","aliases","Prism","languages","extend","comment","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","punctuation","property","important","selector"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnB;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjBA,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,KAAvB,EAA8B;AACnD;AACAC,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE,+CADF;AAEPC,QAAAA,UAAU,EAAE;AAFL;AAF0C,KAA9B,CAAvB;AAOAL,IAAAA,KAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC7C;AACA,qBAAe;AACb;AACAF,QAAAA,OAAO,EAAE,qBAFI;AAGbG,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAE;AADF;AAHK;AAF8B,KAA/C;AAUA,WAAOR,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqBW,MAA5B;AACA,QAAIC,QAAQ,GAAG,wBAAf;AACA,QAAIC,QAAQ,GAAG,CACb,0CADa,EAEb;AACEN,MAAAA,OAAO,EAAE,cADX;AAEEC,MAAAA,UAAU,EAAE;AAFd,KAFa,CAAf;AAOAL,IAAAA,KAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;AAC/C;AACA,uBAAiB;AACfF,QAAAA,OAAO,EAAE,cADM;AAEfG,QAAAA,MAAM,EAAE;AACNI,UAAAA,WAAW,EAAE,GADP;AAENF,UAAAA,QAAQ,EAAEA,QAFJ;AAGNC,UAAAA,QAAQ,EAAEA;AAHJ;AAFO,OAF8B;AAU/C;AACA,uBAAiB;AACfN,QAAAA,OAAO,EAAE,oCADM;AAEfG,QAAAA,MAAM,EAAE;AACNK,UAAAA,QAAQ,EAAE,CACR,iBADQ,EAER;AACER,YAAAA,OAAO,EAAE,YADX;AAEEC,YAAAA,UAAU,EAAE;AAFd,WAFQ,CADJ;AAQNM,UAAAA,WAAW,EAAE,GARP;AASNF,UAAAA,QAAQ,EAAEA,QATJ;AAUNC,UAAAA,QAAQ,EAAEA,QAVJ;AAWNG,UAAAA,SAAS,EAAEb,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqBgB;AAX1B;AAFO;AAX8B,KAAjD;AA4BA,WAAOb,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqBe,QAA5B;AACA,WAAOZ,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqBgB,SAA5B,CAxDiB,CAwDqB;AACtC;;AACAb,IAAAA,KAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,MAA7B,EAAqC,aAArC,EAAoD;AAClDQ,MAAAA,QAAQ,EAAE;AACRV,QAAAA,OAAO,EAAE,sHADD;AAERC,QAAAA,UAAU,EAAE;AAFJ;AADwC,KAApD;AAMD,GAhEA,EAgEEL,KAhEF;AAiEF","sourcesContent":["'use strict'\n\nmodule.exports = sass\nsass.displayName = 'sass'\nsass.aliases = []\nfunction sass(Prism) {\n  ;(function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/m\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n      {\n        pattern: /(\\s+)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\n        lookbehind: true\n      }\n    })\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}