{"ast":null,"code":"'use strict';\n\nmodule.exports = peoplecode;\npeoplecode.displayName = 'peoplecode';\npeoplecode.aliases = ['pcode'];\n\nfunction peoplecode(Prism) {\n  Prism.languages.peoplecode = {\n    comment: RegExp([// C-style multiline comments\n    /\\/\\*[\\s\\S]*?\\*\\//.source, // REM comments\n    /\\bREM[^;]*;/.source, // Nested <* *> comments\n    /<\\*(?:[^<*]|\\*(?!>)|<(?!\\*)|<\\*(?:(?!\\*>)[\\s\\S])*\\*>)*\\*>/.source, // /+ +/ comments\n    /\\/\\+[\\s\\S]*?\\+\\//.source].join('|')),\n    string: {\n      pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n      greedy: true\n    },\n    variable: /%\\w+/,\n    'function-definition': {\n      pattern: /((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'class-name': {\n      pattern: /((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,\n      lookbehind: true,\n      inside: {\n        punctuation: /:/\n      }\n    },\n    keyword: /\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|implements|import|instance|if|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,\n    'operator-keyword': {\n      pattern: /\\b(?:and|not|or)\\b/i,\n      alias: 'operator'\n    },\n    function: /[_a-z]\\w*(?=\\s*\\()/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,\n    punctuation: /[:.;,()[\\]]/\n  };\n  Prism.languages.pcode = Prism.languages.peoplecode;\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/peoplecode.js"],"names":["module","exports","peoplecode","displayName","aliases","Prism","languages","comment","RegExp","source","join","string","pattern","greedy","variable","lookbehind","alias","inside","punctuation","keyword","function","boolean","number","operator","pcode"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,UAAjB;AACAA,UAAU,CAACC,WAAX,GAAyB,YAAzB;AACAD,UAAU,CAACE,OAAX,GAAqB,CAAC,OAAD,CAArB;;AACA,SAASF,UAAT,CAAoBG,KAApB,EAA2B;AACzBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,UAAhB,GAA6B;AAC3BK,IAAAA,OAAO,EAAEC,MAAM,CACb,CACE;AACA,uBAAmBC,MAFrB,EAE6B;AAC3B,kBAAcA,MAHhB,EAGwB;AACtB,gEAA4DA,MAJ9D,EAIsE;AACpE,uBAAmBA,MALrB,EAMEC,IANF,CAMO,GANP,CADa,CADY;AAU3BC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,iDADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KAVmB;AAc3BC,IAAAA,QAAQ,EAAE,MAdiB;AAe3B,2BAAuB;AACrBF,MAAAA,OAAO,EAAE,0CADY;AAErBG,MAAAA,UAAU,EAAE,IAFS;AAGrBC,MAAAA,KAAK,EAAE;AAHc,KAfI;AAoB3B,kBAAc;AACZJ,MAAAA,OAAO,EAAE,gIADG;AAEZG,MAAAA,UAAU,EAAE,IAFA;AAGZE,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAHI,KApBa;AA2B3BC,IAAAA,OAAO,EAAE,+XA3BkB;AA4B3B,wBAAoB;AAClBP,MAAAA,OAAO,EAAE,qBADS;AAElBI,MAAAA,KAAK,EAAE;AAFW,KA5BO;AAgC3BI,IAAAA,QAAQ,EAAE,qBAhCiB;AAiC3BC,IAAAA,OAAO,EAAE,qBAjCkB;AAkC3BC,IAAAA,MAAM,EAAE,mBAlCmB;AAmC3BC,IAAAA,QAAQ,EAAE,6BAnCiB;AAoC3BL,IAAAA,WAAW,EAAE;AApCc,GAA7B;AAsCAb,EAAAA,KAAK,CAACC,SAAN,CAAgBkB,KAAhB,GAAwBnB,KAAK,CAACC,SAAN,CAAgBJ,UAAxC;AACD","sourcesContent":["'use strict'\n\nmodule.exports = peoplecode\npeoplecode.displayName = 'peoplecode'\npeoplecode.aliases = ['pcode']\nfunction peoplecode(Prism) {\n  Prism.languages.peoplecode = {\n    comment: RegExp(\n      [\n        // C-style multiline comments\n        /\\/\\*[\\s\\S]*?\\*\\//.source, // REM comments\n        /\\bREM[^;]*;/.source, // Nested <* *> comments\n        /<\\*(?:[^<*]|\\*(?!>)|<(?!\\*)|<\\*(?:(?!\\*>)[\\s\\S])*\\*>)*\\*>/.source, // /+ +/ comments\n        /\\/\\+[\\s\\S]*?\\+\\//.source\n      ].join('|')\n    ),\n    string: {\n      pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n      greedy: true\n    },\n    variable: /%\\w+/,\n    'function-definition': {\n      pattern: /((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'class-name': {\n      pattern: /((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,\n      lookbehind: true,\n      inside: {\n        punctuation: /:/\n      }\n    },\n    keyword: /\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|implements|import|instance|if|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,\n    'operator-keyword': {\n      pattern: /\\b(?:and|not|or)\\b/i,\n      alias: 'operator'\n    },\n    function: /[_a-z]\\w*(?=\\s*\\()/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,\n    punctuation: /[:.;,()[\\]]/\n  }\n  Prism.languages.pcode = Prism.languages.peoplecode\n}\n"]},"metadata":{},"sourceType":"script"}