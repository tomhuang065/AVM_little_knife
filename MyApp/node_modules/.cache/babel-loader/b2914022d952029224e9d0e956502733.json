{"ast":null,"code":"'use strict';\n\nvar refractorCsharp = require('./csharp.js');\n\nmodule.exports = aspnet;\naspnet.displayName = 'aspnet';\naspnet.aliases = [];\n\nfunction aspnet(Prism) {\n  Prism.register(refractorCsharp);\n  Prism.languages.aspnet = Prism.languages.extend('markup', {\n    'page-directive': {\n      pattern: /<%\\s*@.*%>/i,\n      alias: 'tag',\n      inside: {\n        'page-directive': {\n          pattern: /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,\n          alias: 'tag'\n        },\n        rest: Prism.languages.markup.tag.inside\n      }\n    },\n    directive: {\n      pattern: /<%.*%>/i,\n      alias: 'tag',\n      inside: {\n        directive: {\n          pattern: /<%\\s*?[$=%#:]{0,2}|%>/i,\n          alias: 'tag'\n        },\n        rest: Prism.languages.csharp\n      }\n    }\n  }); // Regexp copied from prism-markup, with a negative look-ahead added\n\n  Prism.languages.aspnet.tag.pattern = /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i; // match directives of attribute value foo=\"<% Bar %>\"\n\n  Prism.languages.insertBefore('inside', 'punctuation', {\n    directive: Prism.languages.aspnet['directive']\n  }, Prism.languages.aspnet.tag.inside['attr-value']);\n  Prism.languages.insertBefore('aspnet', 'comment', {\n    'asp-comment': {\n      pattern: /<%--[\\s\\S]*?--%>/,\n      alias: ['asp', 'comment']\n    }\n  }); // script runat=\"server\" contains csharp, not javascript\n\n  Prism.languages.insertBefore('aspnet', Prism.languages.javascript ? 'script' : 'tag', {\n    'asp-script': {\n      pattern: /(<script(?=.*runat=['\"]?server['\"]?)[^>]*>)[\\s\\S]*?(?=<\\/script>)/i,\n      lookbehind: true,\n      alias: ['asp', 'script'],\n      inside: Prism.languages.csharp || {}\n    }\n  });\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/aspnet.js"],"names":["refractorCsharp","require","module","exports","aspnet","displayName","aliases","Prism","register","languages","extend","pattern","alias","inside","rest","markup","tag","directive","csharp","insertBefore","javascript","lookbehind"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAGC,OAAO,CAAC,aAAD,CAA7B;;AACAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,QAAN,CAAeR,eAAf;AACAO,EAAAA,KAAK,CAACE,SAAN,CAAgBL,MAAhB,GAAyBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,QAAvB,EAAiC;AACxD,sBAAkB;AAChBC,MAAAA,OAAO,EAAE,aADO;AAEhBC,MAAAA,KAAK,EAAE,KAFS;AAGhBC,MAAAA,MAAM,EAAE;AACN,0BAAkB;AAChBF,UAAAA,OAAO,EAAE,2HADO;AAEhBC,UAAAA,KAAK,EAAE;AAFS,SADZ;AAKNE,QAAAA,IAAI,EAAEP,KAAK,CAACE,SAAN,CAAgBM,MAAhB,CAAuBC,GAAvB,CAA2BH;AAL3B;AAHQ,KADsC;AAYxDI,IAAAA,SAAS,EAAE;AACTN,MAAAA,OAAO,EAAE,SADA;AAETC,MAAAA,KAAK,EAAE,KAFE;AAGTC,MAAAA,MAAM,EAAE;AACNI,QAAAA,SAAS,EAAE;AACTN,UAAAA,OAAO,EAAE,wBADA;AAETC,UAAAA,KAAK,EAAE;AAFE,SADL;AAKNE,QAAAA,IAAI,EAAEP,KAAK,CAACE,SAAN,CAAgBS;AALhB;AAHC;AAZ6C,GAAjC,CAAzB,CAFqB,CAyBlB;;AACHX,EAAAA,KAAK,CAACE,SAAN,CAAgBL,MAAhB,CAAuBY,GAAvB,CAA2BL,OAA3B,GAAqC,mGAArC,CA1BqB,CA0BoH;;AACzIJ,EAAAA,KAAK,CAACE,SAAN,CAAgBU,YAAhB,CACE,QADF,EAEE,aAFF,EAGE;AACEF,IAAAA,SAAS,EAAEV,KAAK,CAACE,SAAN,CAAgBL,MAAhB,CAAuB,WAAvB;AADb,GAHF,EAMEG,KAAK,CAACE,SAAN,CAAgBL,MAAhB,CAAuBY,GAAvB,CAA2BH,MAA3B,CAAkC,YAAlC,CANF;AAQAN,EAAAA,KAAK,CAACE,SAAN,CAAgBU,YAAhB,CAA6B,QAA7B,EAAuC,SAAvC,EAAkD;AAChD,mBAAe;AACbR,MAAAA,OAAO,EAAE,kBADI;AAEbC,MAAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,SAAR;AAFM;AADiC,GAAlD,EAnCqB,CAwClB;;AACHL,EAAAA,KAAK,CAACE,SAAN,CAAgBU,YAAhB,CACE,QADF,EAEEZ,KAAK,CAACE,SAAN,CAAgBW,UAAhB,GAA6B,QAA7B,GAAwC,KAF1C,EAGE;AACE,kBAAc;AACZT,MAAAA,OAAO,EAAE,oEADG;AAEZU,MAAAA,UAAU,EAAE,IAFA;AAGZT,MAAAA,KAAK,EAAE,CAAC,KAAD,EAAQ,QAAR,CAHK;AAIZC,MAAAA,MAAM,EAAEN,KAAK,CAACE,SAAN,CAAgBS,MAAhB,IAA0B;AAJtB;AADhB,GAHF;AAYD","sourcesContent":["'use strict'\nvar refractorCsharp = require('./csharp.js')\nmodule.exports = aspnet\naspnet.displayName = 'aspnet'\naspnet.aliases = []\nfunction aspnet(Prism) {\n  Prism.register(refractorCsharp)\n  Prism.languages.aspnet = Prism.languages.extend('markup', {\n    'page-directive': {\n      pattern: /<%\\s*@.*%>/i,\n      alias: 'tag',\n      inside: {\n        'page-directive': {\n          pattern: /<%\\s*@\\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,\n          alias: 'tag'\n        },\n        rest: Prism.languages.markup.tag.inside\n      }\n    },\n    directive: {\n      pattern: /<%.*%>/i,\n      alias: 'tag',\n      inside: {\n        directive: {\n          pattern: /<%\\s*?[$=%#:]{0,2}|%>/i,\n          alias: 'tag'\n        },\n        rest: Prism.languages.csharp\n      }\n    }\n  }) // Regexp copied from prism-markup, with a negative look-ahead added\n  Prism.languages.aspnet.tag.pattern = /<(?!%)\\/?[^\\s>\\/]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i // match directives of attribute value foo=\"<% Bar %>\"\n  Prism.languages.insertBefore(\n    'inside',\n    'punctuation',\n    {\n      directive: Prism.languages.aspnet['directive']\n    },\n    Prism.languages.aspnet.tag.inside['attr-value']\n  )\n  Prism.languages.insertBefore('aspnet', 'comment', {\n    'asp-comment': {\n      pattern: /<%--[\\s\\S]*?--%>/,\n      alias: ['asp', 'comment']\n    }\n  }) // script runat=\"server\" contains csharp, not javascript\n  Prism.languages.insertBefore(\n    'aspnet',\n    Prism.languages.javascript ? 'script' : 'tag',\n    {\n      'asp-script': {\n        pattern: /(<script(?=.*runat=['\"]?server['\"]?)[^>]*>)[\\s\\S]*?(?=<\\/script>)/i,\n        lookbehind: true,\n        alias: ['asp', 'script'],\n        inside: Prism.languages.csharp || {}\n      }\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"script"}