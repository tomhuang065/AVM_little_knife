{"ast":null,"code":"'use strict';\n\nmodule.exports = haxe;\nhaxe.displayName = 'haxe';\nhaxe.aliases = [];\n\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    // Strings can be multi-line\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n          lookbehind: true,\n          inside: {\n            interpolation: {\n              pattern: /^\\$\\w*/,\n              alias: 'variable'\n            } // See rest below\n\n          }\n        }\n      }\n    },\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n    operator: /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n  });\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#\\w+/,\n      alias: 'builtin'\n    },\n    metadata: {\n      pattern: /@:?\\w+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.haxe['string'].inside['interpolation'].inside.rest = Prism.languages.haxe;\n  delete Prism.languages.haxe['class-name'];\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/haxe.js"],"names":["module","exports","haxe","displayName","aliases","Prism","languages","extend","string","pattern","greedy","inside","interpolation","lookbehind","alias","keyword","operator","insertBefore","regex","preprocessor","metadata","reification","rest"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AACrD;AACAC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,mCADH;AAENC,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,MAAM,EAAE;AACNC,QAAAA,aAAa,EAAE;AACbH,UAAAA,OAAO,EAAE,8BADI;AAEbI,UAAAA,UAAU,EAAE,IAFC;AAGbF,UAAAA,MAAM,EAAE;AACNC,YAAAA,aAAa,EAAE;AACbH,cAAAA,OAAO,EAAE,QADI;AAEbK,cAAAA,KAAK,EAAE;AAFM,aADT,CAIJ;;AAJI;AAHK;AADT;AAHF,KAF6C;AAkBrD;AACAC,IAAAA,OAAO,EAAE,uRAnB4C;AAoBrDC,IAAAA,QAAQ,EAAE;AApB2C,GAAhC,CAAvB;AAsBAX,EAAAA,KAAK,CAACC,SAAN,CAAgBW,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;AACjDC,IAAAA,KAAK,EAAE;AACLT,MAAAA,OAAO,EAAE,mCADJ;AAELC,MAAAA,MAAM,EAAE;AAFH;AAD0C,GAAnD;AAMAL,EAAAA,KAAK,CAACC,SAAN,CAAgBW,YAAhB,CAA6B,MAA7B,EAAqC,SAArC,EAAgD;AAC9CE,IAAAA,YAAY,EAAE;AACZV,MAAAA,OAAO,EAAE,MADG;AAEZK,MAAAA,KAAK,EAAE;AAFK,KADgC;AAK9CM,IAAAA,QAAQ,EAAE;AACRX,MAAAA,OAAO,EAAE,QADD;AAERK,MAAAA,KAAK,EAAE;AAFC,KALoC;AAS9CO,IAAAA,WAAW,EAAE;AACXZ,MAAAA,OAAO,EAAE,kBADE;AAEXK,MAAAA,KAAK,EAAE;AAFI;AATiC,GAAhD;AAcAT,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqB,QAArB,EAA+BS,MAA/B,CAAsC,eAAtC,EAAuDA,MAAvD,CAA8DW,IAA9D,GACEjB,KAAK,CAACC,SAAN,CAAgBJ,IADlB;AAEA,SAAOG,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqB,YAArB,CAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = haxe\nhaxe.displayName = 'haxe'\nhaxe.aliases = []\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    // Strings can be multi-line\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n          lookbehind: true,\n          inside: {\n            interpolation: {\n              pattern: /^\\$\\w*/,\n              alias: 'variable'\n            } // See rest below\n          }\n        }\n      }\n    },\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n    operator: /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n  })\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n      greedy: true\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#\\w+/,\n      alias: 'builtin'\n    },\n    metadata: {\n      pattern: /@:?\\w+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'variable'\n    }\n  })\n  Prism.languages.haxe['string'].inside['interpolation'].inside.rest =\n    Prism.languages.haxe\n  delete Prism.languages.haxe['class-name']\n}\n"]},"metadata":{},"sourceType":"script"}