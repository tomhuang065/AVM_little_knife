{"ast":null,"code":"'use strict';\n\nmodule.exports = elixir;\nelixir.displayName = 'elixir';\nelixir.aliases = [];\n\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    comment: /#.*/m,\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [{\n      // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n      pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n      greedy: true,\n      inside: {// See interpolation below\n      }\n    }, {\n      pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n      greedy: true,\n      inside: {// See interpolation below\n      }\n    }, {\n      // Multi-line strings are allowed\n      pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {// See interpolation below\n      }\n    }],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\w+\\??:(?!:)/,\n    capture: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,\n    boolean: /\\b(?:true|false|nil)\\b/,\n    operator: [/\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/, {\n      // We don't want to match <<\n      pattern: /([^<])<(?!<)/,\n      lookbehind: true\n    }, {\n      // We don't want to match >>\n      pattern: /([^>])>(?!>)/,\n      lookbehind: true\n    }],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  };\n  Prism.languages.elixir.string.forEach(function (o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    };\n  });\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/elixir.js"],"names":["module","exports","elixir","displayName","aliases","Prism","languages","comment","regex","pattern","greedy","string","inside","atom","lookbehind","alias","capture","argument","attribute","number","keyword","boolean","operator","punctuation","forEach","o","interpolation","delimiter","rest"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyB;AACvBK,IAAAA,OAAO,EAAE,MADc;AAEvB;AACAC,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE,4LADJ;AAELC,MAAAA,MAAM,EAAE;AAFH,KAHgB;AAOvBC,IAAAA,MAAM,EAAE,CACN;AACE;AACAF,MAAAA,OAAO,EAAE,gNAFX;AAGEC,MAAAA,MAAM,EAAE,IAHV;AAIEE,MAAAA,MAAM,EAAE,CACN;AADM;AAJV,KADM,EASN;AACEH,MAAAA,OAAO,EAAE,qBADX;AAEEC,MAAAA,MAAM,EAAE,IAFV;AAGEE,MAAAA,MAAM,EAAE,CACN;AADM;AAHV,KATM,EAgBN;AACE;AACAH,MAAAA,OAAO,EAAE,+CAFX;AAGEC,MAAAA,MAAM,EAAE,IAHV;AAIEE,MAAAA,MAAM,EAAE,CACN;AADM;AAJV,KAhBM,CAPe;AAgCvBC,IAAAA,IAAI,EAAE;AACJ;AACAJ,MAAAA,OAAO,EAAE,cAFL;AAGJK,MAAAA,UAAU,EAAE,IAHR;AAIJC,MAAAA,KAAK,EAAE;AAJH,KAhCiB;AAsCvB;AACA,iBAAa,cAvCU;AAwCvBC,IAAAA,OAAO,EAAE;AACP;AACAP,MAAAA,OAAO,EAAE,wCAFF;AAGPK,MAAAA,UAAU,EAAE,IAHL;AAIPC,MAAAA,KAAK,EAAE;AAJA,KAxCc;AA8CvBE,IAAAA,QAAQ,EAAE;AACR;AACAR,MAAAA,OAAO,EAAE,cAFD;AAGRK,MAAAA,UAAU,EAAE,IAHJ;AAIRC,MAAAA,KAAK,EAAE;AAJC,KA9Ca;AAoDvBG,IAAAA,SAAS,EAAE;AACTT,MAAAA,OAAO,EAAE,MADA;AAETM,MAAAA,KAAK,EAAE;AAFE,KApDY;AAwDvBI,IAAAA,MAAM,EAAE,iEAxDe;AAyDvBC,IAAAA,OAAO,EAAE,yKAzDc;AA0DvBC,IAAAA,OAAO,EAAE,wBA1Dc;AA2DvBC,IAAAA,QAAQ,EAAE,CACR,0FADQ,EAER;AACE;AACAb,MAAAA,OAAO,EAAE,cAFX;AAGEK,MAAAA,UAAU,EAAE;AAHd,KAFQ,EAOR;AACE;AACAL,MAAAA,OAAO,EAAE,cAFX;AAGEK,MAAAA,UAAU,EAAE;AAHd,KAPQ,CA3Da;AAwEvBS,IAAAA,WAAW,EAAE;AAxEU,GAAzB;AA0EAlB,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,CAAuBS,MAAvB,CAA8Ba,OAA9B,CAAsC,UAAUC,CAAV,EAAa;AACjDA,IAAAA,CAAC,CAACb,MAAF,GAAW;AACTc,MAAAA,aAAa,EAAE;AACbjB,QAAAA,OAAO,EAAE,YADI;AAEbG,QAAAA,MAAM,EAAE;AACNe,UAAAA,SAAS,EAAE;AACTlB,YAAAA,OAAO,EAAE,UADA;AAETM,YAAAA,KAAK,EAAE;AAFE,WADL;AAKNa,UAAAA,IAAI,EAAEvB,KAAK,CAACC,SAAN,CAAgBJ;AALhB;AAFK;AADN,KAAX;AAYD,GAbD;AAcD","sourcesContent":["'use strict'\n\nmodule.exports = elixir\nelixir.displayName = 'elixir'\nelixir.aliases = []\nfunction elixir(Prism) {\n  Prism.languages.elixir = {\n    comment: /#.*/m,\n    // ~r\"\"\"foo\"\"\" (multi-line), ~r'''foo''' (multi-line), ~r/foo/, ~r|foo|, ~r\"foo\", ~r'foo', ~r(foo), ~r[foo], ~r{foo}, ~r<foo>\n    regex: {\n      pattern: /~[rR](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|[^\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[uismxfr]*/,\n      greedy: true\n    },\n    string: [\n      {\n        // ~s\"\"\"foo\"\"\" (multi-line), ~s'''foo''' (multi-line), ~s/foo/, ~s|foo|, ~s\"foo\", ~s'foo', ~s(foo), ~s[foo], ~s{foo} (with interpolation care), ~s<foo>\n        pattern: /~[cCsSwW](?:(\"\"\"|''')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])+\\1|([\\/|\"'])(?:\\\\.|(?!\\2)[^\\\\\\r\\n])+\\2|\\((?:\\\\.|[^\\\\)\\r\\n])+\\)|\\[(?:\\\\.|[^\\\\\\]\\r\\n])+\\]|\\{(?:\\\\.|#\\{[^}]+\\}|#(?!\\{)|[^#\\\\}\\r\\n])+\\}|<(?:\\\\.|[^\\\\>\\r\\n])+>)[csa]?/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      },\n      {\n        // Multi-line strings are allowed\n        pattern: /(\"|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          // See interpolation below\n        }\n      }\n    ],\n    atom: {\n      // Look-behind prevents bad highlighting of the :: operator\n      pattern: /(^|[^:]):\\w+/,\n      lookbehind: true,\n      alias: 'symbol'\n    },\n    // Look-ahead prevents bad highlighting of the :: operator\n    'attr-name': /\\w+\\??:(?!:)/,\n    capture: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&(?:[^&\\s\\d()][^\\s()]*|(?=\\())/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    argument: {\n      // Look-behind prevents bad highlighting of the && operator\n      pattern: /(^|[^&])&\\d+/,\n      lookbehind: true,\n      alias: 'variable'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'variable'\n    },\n    number: /\\b(?:0[box][a-f\\d_]+|\\d[\\d_]*)(?:\\.[\\d_]+)?(?:e[+-]?[\\d_]+)?\\b/i,\n    keyword: /\\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|require|rescue|try|unless|use|when)\\b/,\n    boolean: /\\b(?:true|false|nil)\\b/,\n    operator: [\n      /\\bin\\b|&&?|\\|[|>]?|\\\\\\\\|::|\\.\\.\\.?|\\+\\+?|-[->]?|<[-=>]|>=|!==?|\\B!|=(?:==?|[>~])?|[*\\/^]/,\n      {\n        // We don't want to match <<\n        pattern: /([^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /([^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    punctuation: /<<|>>|[.,%\\[\\]{}()]/\n  }\n  Prism.languages.elixir.string.forEach(function (o) {\n    o.inside = {\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.elixir\n        }\n      }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}