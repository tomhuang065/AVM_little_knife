{"ast":null,"code":"'use strict';\n\nmodule.exports = ocaml;\nocaml.displayName = 'ocaml';\nocaml.aliases = [];\n\nfunction ocaml(Prism) {\n  Prism.languages.ocaml = {\n    comment: /\\(\\*[\\s\\S]*?\\*\\)/,\n    string: [{\n      pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n      greedy: true\n    }, {\n      pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n      greedy: true\n    }],\n    number: /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?[\\d_]+)?)/i,\n    directive: {\n      pattern: /\\B#\\w+/,\n      alias: 'important'\n    },\n    label: {\n      pattern: /\\B~\\w+/,\n      alias: 'function'\n    },\n    'type-variable': {\n      pattern: /\\B'\\w+/,\n      alias: 'function'\n    },\n    variant: {\n      pattern: /`\\w+/,\n      alias: 'variable'\n    },\n    module: {\n      pattern: /\\b[A-Z]\\w+/,\n      alias: 'variable'\n    },\n    // For the list of keywords and operators,\n    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n    keyword: /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    // Custom operators are allowed\n    operator: /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n    punctuation: /[(){}\\[\\]|.,:;]|\\b_\\b/\n  };\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/ocaml.js"],"names":["module","exports","ocaml","displayName","aliases","Prism","languages","comment","string","pattern","greedy","number","directive","alias","label","variant","keyword","boolean","operator","punctuation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,KAAjB;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;;AACA,SAASF,KAAT,CAAeG,KAAf,EAAsB;AACpBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,KAAhB,GAAwB;AACtBK,IAAAA,OAAO,EAAE,kBADa;AAEtBC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,OAAO,EAAE,uBADX;AAEEC,MAAAA,MAAM,EAAE;AAFV,KADM,EAKN;AACED,MAAAA,OAAO,EAAE,oDADX;AAEEC,MAAAA,MAAM,EAAE;AAFV,KALM,CAFc;AAYtBC,IAAAA,MAAM,EAAE,4EAZc;AAatBC,IAAAA,SAAS,EAAE;AACTH,MAAAA,OAAO,EAAE,QADA;AAETI,MAAAA,KAAK,EAAE;AAFE,KAbW;AAiBtBC,IAAAA,KAAK,EAAE;AACLL,MAAAA,OAAO,EAAE,QADJ;AAELI,MAAAA,KAAK,EAAE;AAFF,KAjBe;AAqBtB,qBAAiB;AACfJ,MAAAA,OAAO,EAAE,QADM;AAEfI,MAAAA,KAAK,EAAE;AAFQ,KArBK;AAyBtBE,IAAAA,OAAO,EAAE;AACPN,MAAAA,OAAO,EAAE,MADF;AAEPI,MAAAA,KAAK,EAAE;AAFA,KAzBa;AA6BtBb,IAAAA,MAAM,EAAE;AACNS,MAAAA,OAAO,EAAE,YADH;AAENI,MAAAA,KAAK,EAAE;AAFD,KA7Bc;AAiCtB;AACA;AACAG,IAAAA,OAAO,EAAE,+RAnCa;AAoCtBC,IAAAA,OAAO,EAAE,oBApCa;AAqCtB;AACAC,IAAAA,QAAQ,EAAE,6FAtCY;AAuCtBC,IAAAA,WAAW,EAAE;AAvCS,GAAxB;AAyCD","sourcesContent":["'use strict'\n\nmodule.exports = ocaml\nocaml.displayName = 'ocaml'\nocaml.aliases = []\nfunction ocaml(Prism) {\n  Prism.languages.ocaml = {\n    comment: /\\(\\*[\\s\\S]*?\\*\\)/,\n    string: [\n      {\n        pattern: /\"(?:\\\\.|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      },\n      {\n        pattern: /(['`])(?:\\\\(?:\\d+|x[\\da-f]+|.)|(?!\\1)[^\\\\\\r\\n])\\1/i,\n        greedy: true\n      }\n    ],\n    number: /\\b(?:0x[\\da-f][\\da-f_]+|(?:0[bo])?\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?[\\d_]+)?)/i,\n    directive: {\n      pattern: /\\B#\\w+/,\n      alias: 'important'\n    },\n    label: {\n      pattern: /\\B~\\w+/,\n      alias: 'function'\n    },\n    'type-variable': {\n      pattern: /\\B'\\w+/,\n      alias: 'function'\n    },\n    variant: {\n      pattern: /`\\w+/,\n      alias: 'variable'\n    },\n    module: {\n      pattern: /\\b[A-Z]\\w+/,\n      alias: 'variable'\n    },\n    // For the list of keywords and operators,\n    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n    keyword: /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    // Custom operators are allowed\n    operator: /:=|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n    punctuation: /[(){}\\[\\]|.,:;]|\\b_\\b/\n  }\n}\n"]},"metadata":{},"sourceType":"script"}