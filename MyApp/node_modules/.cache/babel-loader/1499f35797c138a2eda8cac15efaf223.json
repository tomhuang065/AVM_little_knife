{"ast":null,"code":"'use strict';\n\nmodule.exports = toml;\ntoml.displayName = 'toml';\ntoml.aliases = [];\n\nfunction toml(Prism) {\n  ;\n\n  (function (Prism) {\n    var key = /(?:[\\w-]+|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")/.source;\n    /**\n     * @param {string} pattern\n     */\n\n    function insertKey(pattern) {\n      return pattern.replace(/__/g, function () {\n        return key;\n      });\n    }\n\n    Prism.languages.toml = {\n      comment: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      table: {\n        pattern: RegExp(insertKey(/(^\\s*\\[\\s*(?:\\[\\s*)?)__(?:\\s*\\.\\s*__)*(?=\\s*\\])/.source), 'm'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name'\n      },\n      key: {\n        pattern: RegExp(insertKey(/(^\\s*|[{,]\\s*)__(?:\\s*\\.\\s*__)*(?=\\s*=)/.source), 'm'),\n        lookbehind: true,\n        greedy: true,\n        alias: 'property'\n      },\n      string: {\n        pattern: /\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: true\n      },\n      date: [{\n        // Offset Date-Time, Local Date-Time, Local Date\n        pattern: /\\b\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?\\b/i,\n        alias: 'number'\n      }, {\n        // Local Time\n        pattern: /\\b\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?\\b/,\n        alias: 'number'\n      }],\n      number: /(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\b\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?\\b(?:inf|nan)\\b/,\n      boolean: /\\b(?:true|false)\\b/,\n      punctuation: /[.,=[\\]{}]/\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/toml.js"],"names":["module","exports","toml","displayName","aliases","Prism","key","source","insertKey","pattern","replace","languages","comment","greedy","table","RegExp","lookbehind","alias","string","date","number","boolean","punctuation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnB;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjB,QAAIC,GAAG,GAAG,+CAA+CC,MAAzD;AACA;AACJ;AACA;;AACI,aAASC,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,aAAOA,OAAO,CAACC,OAAR,CAAgB,KAAhB,EAAuB,YAAY;AACxC,eAAOJ,GAAP;AACD,OAFM,CAAP;AAGD;;AACDD,IAAAA,KAAK,CAACM,SAAN,CAAgBT,IAAhB,GAAuB;AACrBU,MAAAA,OAAO,EAAE;AACPH,QAAAA,OAAO,EAAE,KADF;AAEPI,QAAAA,MAAM,EAAE;AAFD,OADY;AAKrBC,MAAAA,KAAK,EAAE;AACLL,QAAAA,OAAO,EAAEM,MAAM,CACbP,SAAS,CAAC,kDAAkDD,MAAnD,CADI,EAEb,GAFa,CADV;AAKLS,QAAAA,UAAU,EAAE,IALP;AAMLH,QAAAA,MAAM,EAAE,IANH;AAOLI,QAAAA,KAAK,EAAE;AAPF,OALc;AAcrBX,MAAAA,GAAG,EAAE;AACHG,QAAAA,OAAO,EAAEM,MAAM,CACbP,SAAS,CAAC,0CAA0CD,MAA3C,CADI,EAEb,GAFa,CADZ;AAKHS,QAAAA,UAAU,EAAE,IALT;AAMHH,QAAAA,MAAM,EAAE,IANL;AAOHI,QAAAA,KAAK,EAAE;AAPJ,OAdgB;AAuBrBC,MAAAA,MAAM,EAAE;AACNT,QAAAA,OAAO,EAAE,6EADH;AAENI,QAAAA,MAAM,EAAE;AAFF,OAvBa;AA2BrBM,MAAAA,IAAI,EAAE,CACJ;AACE;AACAV,QAAAA,OAAO,EAAE,mFAFX;AAGEQ,QAAAA,KAAK,EAAE;AAHT,OADI,EAMJ;AACE;AACAR,QAAAA,OAAO,EAAE,iCAFX;AAGEQ,QAAAA,KAAK,EAAE;AAHT,OANI,CA3Be;AAuCrBG,MAAAA,MAAM,EAAE,0KAvCa;AAwCrBC,MAAAA,OAAO,EAAE,oBAxCY;AAyCrBC,MAAAA,WAAW,EAAE;AAzCQ,KAAvB;AA2CD,GArDA,EAqDEjB,KArDF;AAsDF","sourcesContent":["'use strict'\n\nmodule.exports = toml\ntoml.displayName = 'toml'\ntoml.aliases = []\nfunction toml(Prism) {\n  ;(function (Prism) {\n    var key = /(?:[\\w-]+|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\")/.source\n    /**\n     * @param {string} pattern\n     */\n    function insertKey(pattern) {\n      return pattern.replace(/__/g, function () {\n        return key\n      })\n    }\n    Prism.languages.toml = {\n      comment: {\n        pattern: /#.*/,\n        greedy: true\n      },\n      table: {\n        pattern: RegExp(\n          insertKey(/(^\\s*\\[\\s*(?:\\[\\s*)?)__(?:\\s*\\.\\s*__)*(?=\\s*\\])/.source),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'class-name'\n      },\n      key: {\n        pattern: RegExp(\n          insertKey(/(^\\s*|[{,]\\s*)__(?:\\s*\\.\\s*__)*(?=\\s*=)/.source),\n          'm'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'property'\n      },\n      string: {\n        pattern: /\"\"\"(?:\\\\[\\s\\S]|[^\\\\])*?\"\"\"|'''[\\s\\S]*?'''|'[^'\\n\\r]*'|\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n        greedy: true\n      },\n      date: [\n        {\n          // Offset Date-Time, Local Date-Time, Local Date\n          pattern: /\\b\\d{4}-\\d{2}-\\d{2}(?:[T\\s]\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})?)?\\b/i,\n          alias: 'number'\n        },\n        {\n          // Local Time\n          pattern: /\\b\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?\\b/,\n          alias: 'number'\n        }\n      ],\n      number: /(?:\\b0(?:x[\\da-zA-Z]+(?:_[\\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\\b|[-+]?\\b\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?\\b|[-+]?\\b(?:inf|nan)\\b/,\n      boolean: /\\b(?:true|false)\\b/,\n      punctuation: /[.,=[\\]{}]/\n    }\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}