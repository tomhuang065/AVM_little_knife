{"ast":null,"code":"'use strict';\n\nmodule.exports = c;\nc.displayName = 'c';\nc.aliases = [];\n\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n    function: /[a-z_]\\w*(?=\\s*\\()/i,\n    number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n  });\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern: /(^\\s*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        string: [{\n          // highlight the path of the include statement as a string\n          pattern: /^(#\\s*include\\s*)<[^>]+>/,\n          lookbehind: true\n        }, Prism.languages.c['string']],\n        comment: Prism.languages.c['comment'],\n        'macro-name': [{\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n          lookbehind: true\n        }, {\n          pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n          lookbehind: true,\n          alias: 'function'\n        }],\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /^(#\\s*)[a-z]+/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'directive-hash': /^#/,\n        punctuation: /##|\\\\(?=[\\r\\n])/,\n        expression: {\n          pattern: /\\S[\\s\\S]*/,\n          inside: Prism.languages.c\n        }\n      }\n    },\n    // highlight predefined macros as constants\n    constant: /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n  });\n  delete Prism.languages.c['boolean'];\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/c.js"],"names":["module","exports","c","displayName","aliases","Prism","languages","extend","comment","pattern","greedy","lookbehind","keyword","function","number","operator","insertBefore","macro","alias","inside","string","directive","punctuation","expression","constant"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,CAAjB;AACAA,CAAC,CAACC,WAAF,GAAgB,GAAhB;AACAD,CAAC,CAACE,OAAF,GAAY,EAAZ;;AACA,SAASF,CAAT,CAAWG,KAAX,EAAkB;AAChBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,CAAhB,GAAoBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AAClDC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,qEADF;AAEPC,MAAAA,MAAM,EAAE;AAFD,KADyC;AAKlD,kBAAc;AACZD,MAAAA,OAAO,EAAE,kFADG;AAEZE,MAAAA,UAAU,EAAE;AAFA,KALoC;AASlDC,IAAAA,OAAO,EAAE,mVATyC;AAUlDC,IAAAA,QAAQ,EAAE,qBAVwC;AAWlDC,IAAAA,MAAM,EAAE,mHAX0C;AAYlDC,IAAAA,QAAQ,EAAE;AAZwC,GAAhC,CAApB;AAcAV,EAAAA,KAAK,CAACC,SAAN,CAAgBU,YAAhB,CAA6B,GAA7B,EAAkC,QAAlC,EAA4C;AAC1CC,IAAAA,KAAK,EAAE;AACL;AACA;AACAR,MAAAA,OAAO,EAAE,wFAHJ;AAILE,MAAAA,UAAU,EAAE,IAJP;AAKLD,MAAAA,MAAM,EAAE,IALH;AAMLQ,MAAAA,KAAK,EAAE,UANF;AAOLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAE,CACN;AACE;AACAX,UAAAA,OAAO,EAAE,0BAFX;AAGEE,UAAAA,UAAU,EAAE;AAHd,SADM,EAMNN,KAAK,CAACC,SAAN,CAAgBJ,CAAhB,CAAkB,QAAlB,CANM,CADF;AASNM,QAAAA,OAAO,EAAEH,KAAK,CAACC,SAAN,CAAgBJ,CAAhB,CAAkB,SAAlB,CATH;AAUN,sBAAc,CACZ;AACEO,UAAAA,OAAO,EAAE,8BADX;AAEEE,UAAAA,UAAU,EAAE;AAFd,SADY,EAKZ;AACEF,UAAAA,OAAO,EAAE,8BADX;AAEEE,UAAAA,UAAU,EAAE,IAFd;AAGEO,UAAAA,KAAK,EAAE;AAHT,SALY,CAVR;AAqBN;AACAG,QAAAA,SAAS,EAAE;AACTZ,UAAAA,OAAO,EAAE,eADA;AAETE,UAAAA,UAAU,EAAE,IAFH;AAGTO,UAAAA,KAAK,EAAE;AAHE,SAtBL;AA2BN,0BAAkB,IA3BZ;AA4BNI,QAAAA,WAAW,EAAE,iBA5BP;AA6BNC,QAAAA,UAAU,EAAE;AACVd,UAAAA,OAAO,EAAE,WADC;AAEVU,UAAAA,MAAM,EAAEd,KAAK,CAACC,SAAN,CAAgBJ;AAFd;AA7BN;AAPH,KADmC;AA2C1C;AACAsB,IAAAA,QAAQ,EAAE;AA5CgC,GAA5C;AA8CA,SAAOnB,KAAK,CAACC,SAAN,CAAgBJ,CAAhB,CAAkB,SAAlB,CAAP;AACD","sourcesContent":["'use strict'\n\nmodule.exports = c\nc.displayName = 'c'\nc.aliases = []\nfunction c(Prism) {\n  Prism.languages.c = Prism.languages.extend('clike', {\n    comment: {\n      pattern: /\\/\\/(?:[^\\r\\n\\\\]|\\\\(?:\\r\\n?|\\n|(?![\\r\\n])))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n      greedy: true\n    },\n    'class-name': {\n      pattern: /(\\b(?:enum|struct)\\s+(?:__attribute__\\s*\\(\\([\\s\\S]*?\\)\\)\\s*)?)\\w+|\\b[a-z]\\w*_t\\b/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:__attribute__|_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|asm|typeof|inline|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|union|unsigned|void|volatile|while)\\b/,\n    function: /[a-z_]\\w*(?=\\s*\\()/i,\n    number: /(?:\\b0x(?:[\\da-f]+(?:\\.[\\da-f]*)?|\\.[\\da-f]+)(?:p[+-]?\\d+)?|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?)[ful]{0,4}/i,\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?/\n  })\n  Prism.languages.insertBefore('c', 'string', {\n    macro: {\n      // allow for multiline macro definitions\n      // spaces after the # character compile fine with gcc\n      pattern: /(^\\s*)#\\s*[a-z](?:[^\\r\\n\\\\/]|\\/(?!\\*)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/|\\\\(?:\\r\\n|[\\s\\S]))*/im,\n      lookbehind: true,\n      greedy: true,\n      alias: 'property',\n      inside: {\n        string: [\n          {\n            // highlight the path of the include statement as a string\n            pattern: /^(#\\s*include\\s*)<[^>]+>/,\n            lookbehind: true\n          },\n          Prism.languages.c['string']\n        ],\n        comment: Prism.languages.c['comment'],\n        'macro-name': [\n          {\n            pattern: /(^#\\s*define\\s+)\\w+\\b(?!\\()/i,\n            lookbehind: true\n          },\n          {\n            pattern: /(^#\\s*define\\s+)\\w+\\b(?=\\()/i,\n            lookbehind: true,\n            alias: 'function'\n          }\n        ],\n        // highlight macro directives as keywords\n        directive: {\n          pattern: /^(#\\s*)[a-z]+/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        'directive-hash': /^#/,\n        punctuation: /##|\\\\(?=[\\r\\n])/,\n        expression: {\n          pattern: /\\S[\\s\\S]*/,\n          inside: Prism.languages.c\n        }\n      }\n    },\n    // highlight predefined macros as constants\n    constant: /\\b(?:__FILE__|__LINE__|__DATE__|__TIME__|__TIMESTAMP__|__func__|EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|stdin|stdout|stderr)\\b/\n  })\n  delete Prism.languages.c['boolean']\n}\n"]},"metadata":{},"sourceType":"script"}