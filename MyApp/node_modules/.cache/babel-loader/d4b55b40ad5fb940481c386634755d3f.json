{"ast":null,"code":"'use strict';\n\nvar refractorRuby = require('./ruby.js');\n\nmodule.exports = crystal;\ncrystal.displayName = 'crystal';\ncrystal.aliases = [];\n\nfunction crystal(Prism) {\n  Prism.register(refractorRuby);\n\n  (function (Prism) {\n    Prism.languages.crystal = Prism.languages.extend('ruby', {\n      keyword: [/\\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\\b/, {\n        pattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,\n        lookbehind: true\n      }],\n      number: /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/\n    });\n    Prism.languages.insertBefore('crystal', 'string', {\n      attribute: {\n        pattern: /@\\[.+?\\]/,\n        alias: 'attr-name',\n        inside: {\n          delimiter: {\n            pattern: /^@\\[|\\]$/,\n            alias: 'tag'\n          },\n          rest: Prism.languages.crystal\n        }\n      },\n      expansion: [{\n        pattern: /\\{\\{.+?\\}\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^\\{\\{|\\}\\}$/,\n            alias: 'tag'\n          },\n          rest: Prism.languages.crystal\n        }\n      }, {\n        pattern: /\\{%.+?%\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^\\{%|%\\}$/,\n            alias: 'tag'\n          },\n          rest: Prism.languages.crystal\n        }\n      }]\n    });\n  })(Prism);\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/crystal.js"],"names":["refractorRuby","require","module","exports","crystal","displayName","aliases","Prism","register","languages","extend","keyword","pattern","lookbehind","number","insertBefore","attribute","alias","inside","delimiter","rest","expansion"],"mappings":"AAAA;;AACA,IAAIA,aAAa,GAAGC,OAAO,CAAC,WAAD,CAA3B;;AACAC,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AACAA,OAAO,CAACC,WAAR,GAAsB,SAAtB;AACAD,OAAO,CAACE,OAAR,GAAkB,EAAlB;;AACA,SAASF,OAAT,CAAiBG,KAAjB,EAAwB;AACtBA,EAAAA,KAAK,CAACC,QAAN,CAAeR,aAAf;;AACC,GAAC,UAAUO,KAAV,EAAiB;AACjBA,IAAAA,KAAK,CAACE,SAAN,CAAgBL,OAAhB,GAA0BG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,MAAvB,EAA+B;AACvDC,MAAAA,OAAO,EAAE,CACP,gWADO,EAEP;AACEC,QAAAA,OAAO,EAAE,+BADX;AAEEC,QAAAA,UAAU,EAAE;AAFd,OAFO,CAD8C;AAQvDC,MAAAA,MAAM,EAAE;AAR+C,KAA/B,CAA1B;AAUAP,IAAAA,KAAK,CAACE,SAAN,CAAgBM,YAAhB,CAA6B,SAA7B,EAAwC,QAAxC,EAAkD;AAChDC,MAAAA,SAAS,EAAE;AACTJ,QAAAA,OAAO,EAAE,UADA;AAETK,QAAAA,KAAK,EAAE,WAFE;AAGTC,QAAAA,MAAM,EAAE;AACNC,UAAAA,SAAS,EAAE;AACTP,YAAAA,OAAO,EAAE,UADA;AAETK,YAAAA,KAAK,EAAE;AAFE,WADL;AAKNG,UAAAA,IAAI,EAAEb,KAAK,CAACE,SAAN,CAAgBL;AALhB;AAHC,OADqC;AAYhDiB,MAAAA,SAAS,EAAE,CACT;AACET,QAAAA,OAAO,EAAE,aADX;AAEEM,QAAAA,MAAM,EAAE;AACNC,UAAAA,SAAS,EAAE;AACTP,YAAAA,OAAO,EAAE,aADA;AAETK,YAAAA,KAAK,EAAE;AAFE,WADL;AAKNG,UAAAA,IAAI,EAAEb,KAAK,CAACE,SAAN,CAAgBL;AALhB;AAFV,OADS,EAWT;AACEQ,QAAAA,OAAO,EAAE,WADX;AAEEM,QAAAA,MAAM,EAAE;AACNC,UAAAA,SAAS,EAAE;AACTP,YAAAA,OAAO,EAAE,WADA;AAETK,YAAAA,KAAK,EAAE;AAFE,WADL;AAKNG,UAAAA,IAAI,EAAEb,KAAK,CAACE,SAAN,CAAgBL;AALhB;AAFV,OAXS;AAZqC,KAAlD;AAmCD,GA9CA,EA8CEG,KA9CF;AA+CF","sourcesContent":["'use strict'\nvar refractorRuby = require('./ruby.js')\nmodule.exports = crystal\ncrystal.displayName = 'crystal'\ncrystal.aliases = []\nfunction crystal(Prism) {\n  Prism.register(refractorRuby)\n  ;(function (Prism) {\n    Prism.languages.crystal = Prism.languages.extend('ruby', {\n      keyword: [\n        /\\b(?:abstract|alias|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|rescue|return|require|select|self|sizeof|struct|super|then|type|typeof|uninitialized|union|unless|until|when|while|with|yield|__DIR__|__END_LINE__|__FILE__|__LINE__)\\b/,\n        {\n          pattern: /(\\.\\s*)(?:is_a|responds_to)\\?/,\n          lookbehind: true\n        }\n      ],\n      number: /\\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\\da-fA-F_]*[\\da-fA-F]|(?:\\d(?:[\\d_]*\\d)?)(?:\\.[\\d_]*\\d)?(?:[eE][+-]?[\\d_]*\\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\\b/\n    })\n    Prism.languages.insertBefore('crystal', 'string', {\n      attribute: {\n        pattern: /@\\[.+?\\]/,\n        alias: 'attr-name',\n        inside: {\n          delimiter: {\n            pattern: /^@\\[|\\]$/,\n            alias: 'tag'\n          },\n          rest: Prism.languages.crystal\n        }\n      },\n      expansion: [\n        {\n          pattern: /\\{\\{.+?\\}\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^\\{\\{|\\}\\}$/,\n              alias: 'tag'\n            },\n            rest: Prism.languages.crystal\n          }\n        },\n        {\n          pattern: /\\{%.+?%\\}/,\n          inside: {\n            delimiter: {\n              pattern: /^\\{%|%\\}$/,\n              alias: 'tag'\n            },\n            rest: Prism.languages.crystal\n          }\n        }\n      ]\n    })\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}