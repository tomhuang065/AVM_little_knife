{"ast":null,"code":"'use strict';\n\nmodule.exports = ruby;\nruby.displayName = 'ruby';\nruby.aliases = ['rb'];\n\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *     constant, builtin, variable, symbol, regex\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [/#.*/, {\n        pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      }],\n      'class-name': {\n        pattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.\\\\]/\n        }\n      },\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/\n    });\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    };\n    delete Prism.languages.ruby.function;\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [{\n        pattern: RegExp(/%r/.source + '(?:' + [/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/.source, /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/.source, // Here we need to specifically allow interpolation\n        /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/.source, /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/.source, /<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/.source].join('|') + ')'),\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*(?:$|[\\r\\n,.;})]))/,\n        lookbehind: true,\n        greedy: true\n      }],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    });\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    });\n    Prism.languages.ruby.string = [{\n      pattern: RegExp(/%[qQiIwWxs]?/.source + '(?:' + [/([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source, /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source, // Here we need to specifically allow interpolation\n      /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source, /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source, /<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source].join('|') + ')'),\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }];\n    Prism.languages.rb = Prism.languages.ruby;\n  })(Prism);\n}","map":{"version":3,"sources":["/home/tomhuang/Developpement web/final_project/wp_final_project/MyApp/node_modules/refractor/lang/ruby.js"],"names":["module","exports","ruby","displayName","aliases","Prism","languages","extend","comment","pattern","greedy","lookbehind","inside","punctuation","keyword","interpolation","delimiter","alias","rest","function","insertBefore","regex","RegExp","source","join","variable","symbol","builtin","constant","string","rb"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,CAAC,IAAD,CAAf;;AACA,SAASF,IAAT,CAAcG,KAAd,EAAqB;AACnB;AACF;AACA;AACA;AACA;AACA;AACE;;AAAC,GAAC,UAAUA,KAAV,EAAiB;AACjBA,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuBG,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AACrDC,MAAAA,OAAO,EAAE,CACP,KADO,EAEP;AACEC,QAAAA,OAAO,EAAE,yBADX;AAEEC,QAAAA,MAAM,EAAE;AAFV,OAFO,CAD4C;AAQrD,oBAAc;AACZD,QAAAA,OAAO,EAAE,wCADG;AAEZE,QAAAA,UAAU,EAAE,IAFA;AAGZC,QAAAA,MAAM,EAAE;AACNC,UAAAA,WAAW,EAAE;AADP;AAHI,OARuC;AAerDC,MAAAA,OAAO,EAAE;AAf4C,KAAhC,CAAvB;AAiBA,QAAIC,aAAa,GAAG;AAClBN,MAAAA,OAAO,EAAE,YADS;AAElBG,MAAAA,MAAM,EAAE;AACNI,QAAAA,SAAS,EAAE;AACTP,UAAAA,OAAO,EAAE,UADA;AAETQ,UAAAA,KAAK,EAAE;AAFE,SADL;AAKNC,QAAAA,IAAI,EAAEb,KAAK,CAACC,SAAN,CAAgBJ;AALhB;AAFU,KAApB;AAUA,WAAOG,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqBiB,QAA5B;AACAd,IAAAA,KAAK,CAACC,SAAN,CAAgBc,YAAhB,CAA6B,MAA7B,EAAqC,SAArC,EAAgD;AAC9CC,MAAAA,KAAK,EAAE,CACL;AACEZ,QAAAA,OAAO,EAAEa,MAAM,CACb,KAAKC,MAAL,GACE,KADF,GAEE,CACE,6DACGA,MAFL,EAGE,sCAAsCA,MAHxC,EAGgD;AAC9C,+DAAuDA,MAJzD,EAKE,wCAAwCA,MAL1C,EAME,oCAAoCA,MANtC,EAOEC,IAPF,CAOO,GAPP,CAFF,GAUE,GAXW,CADjB;AAcEd,QAAAA,MAAM,EAAE,IAdV;AAeEE,QAAAA,MAAM,EAAE;AACNG,UAAAA,aAAa,EAAEA;AADT;AAfV,OADK,EAoBL;AACEN,QAAAA,OAAO,EAAE,yFADX;AAEEE,QAAAA,UAAU,EAAE,IAFd;AAGED,QAAAA,MAAM,EAAE;AAHV,OApBK,CADuC;AA2B9Ce,MAAAA,QAAQ,EAAE,8BA3BoC;AA4B9CC,MAAAA,MAAM,EAAE;AACNjB,QAAAA,OAAO,EAAE,kCADH;AAENE,QAAAA,UAAU,EAAE;AAFN,OA5BsC;AAgC9C,2BAAqB;AACnBF,QAAAA,OAAO,EAAE,kBADU;AAEnBE,QAAAA,UAAU,EAAE,IAFO;AAGnBC,QAAAA,MAAM,EAAE;AACNO,UAAAA,QAAQ,EAAE,MADJ;AAEND,UAAAA,IAAI,EAAEb,KAAK,CAACC,SAAN,CAAgBJ;AAFhB;AAHW;AAhCyB,KAAhD;AAyCAG,IAAAA,KAAK,CAACC,SAAN,CAAgBc,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC7CO,MAAAA,OAAO,EAAE,8OADoC;AAE7CC,MAAAA,QAAQ,EAAE;AAFmC,KAA/C;AAIAvB,IAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,CAAqB2B,MAArB,GAA8B,CAC5B;AACEpB,MAAAA,OAAO,EAAEa,MAAM,CACb,eAAeC,MAAf,GACE,KADF,GAEE,CACE,mDAAmDA,MADrD,EAEE,4BAA4BA,MAF9B,EAEsC;AACpC,mDAA6CA,MAH/C,EAIE,8BAA8BA,MAJhC,EAKE,0BAA0BA,MAL5B,EAMEC,IANF,CAMO,GANP,CAFF,GASE,GAVW,CADjB;AAaEd,MAAAA,MAAM,EAAE,IAbV;AAcEE,MAAAA,MAAM,EAAE;AACNG,QAAAA,aAAa,EAAEA;AADT;AAdV,KAD4B,EAmB5B;AACEN,MAAAA,OAAO,EAAE,mEADX;AAEEC,MAAAA,MAAM,EAAE,IAFV;AAGEE,MAAAA,MAAM,EAAE;AACNG,QAAAA,aAAa,EAAEA;AADT;AAHV,KAnB4B,CAA9B;AA2BAV,IAAAA,KAAK,CAACC,SAAN,CAAgBwB,EAAhB,GAAqBzB,KAAK,CAACC,SAAN,CAAgBJ,IAArC;AACD,GAtGA,EAsGEG,KAtGF;AAuGF","sourcesContent":["'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *     constant, builtin, variable, symbol, regex\n   */\n  ;(function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [\n        /#.*/,\n        {\n          pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n          greedy: true\n        }\n      ],\n      'class-name': {\n        pattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n        lookbehind: true,\n        inside: {\n          punctuation: /[.\\\\]/\n        }\n      },\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/\n    })\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    }\n    delete Prism.languages.ruby.function\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [\n        {\n          pattern: RegExp(\n            /%r/.source +\n              '(?:' +\n              [\n                /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/\n                  .source,\n                /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/.source, // Here we need to specifically allow interpolation\n                /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/.source,\n                /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/.source,\n                /<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/.source\n              ].join('|') +\n              ')'\n          ),\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /(^|[^/])\\/(?!\\/)(?:\\[[^\\r\\n\\]]+\\]|\\\\.|[^[/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*(?:$|[\\r\\n,.;})]))/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    })\n    Prism.languages.ruby.string = [\n      {\n        pattern: RegExp(\n          /%[qQiIwWxs]?/.source +\n            '(?:' +\n            [\n              /([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/.source,\n              /\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/.source, // Here we need to specifically allow interpolation\n              /\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/.source,\n              /\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/.source,\n              /<(?:[^<>\\\\]|\\\\[\\s\\S])*>/.source\n            ].join('|') +\n            ')'\n        ),\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|#(?!\\{)|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\#\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }\n    ]\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}